// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cred.proto
// </auto-generated>
// Original file comments:
// # hello.proto
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ULZAsset.ProtoMod {
  public static partial class CreditsAuth
  {
    static readonly string __ServiceName = "RoomStatus.CreditsAuth";

    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.CredReq> __Marshaller_RoomStatus_CredReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.CredReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.CheckCredResp> __Marshaller_RoomStatus_CheckCredResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.CheckCredResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.CreateCredResp> __Marshaller_RoomStatus_CreateCredResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.CreateCredResp.Parser.ParseFrom);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp> __Method_CheckCred = new grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckCred",
        __Marshaller_RoomStatus_CredReq,
        __Marshaller_RoomStatus_CheckCredResp);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp> __Method_CreateCred = new grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCred",
        __Marshaller_RoomStatus_CredReq,
        __Marshaller_RoomStatus_CheckCredResp);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CreateCredResp> __Method_GetCred = new grpc::Method<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CreateCredResp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCred",
        __Marshaller_RoomStatus_CredReq,
        __Marshaller_RoomStatus_CreateCredResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ULZAsset.ProtoMod.CredReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CreditsAuth</summary>
    [grpc::BindServiceMethod(typeof(CreditsAuth), "BindService")]
    public abstract partial class CreditsAuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.CheckCredResp> CheckCred(global::ULZAsset.ProtoMod.CredReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.CheckCredResp> CreateCred(global::ULZAsset.ProtoMod.CredReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetCred(global::ULZAsset.ProtoMod.CredReq request, grpc::IServerStreamWriter<global::ULZAsset.ProtoMod.CreateCredResp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CreditsAuth</summary>
    public partial class CreditsAuthClient : grpc::ClientBase<CreditsAuthClient>
    {
      /// <summary>Creates a new client for CreditsAuth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CreditsAuthClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CreditsAuth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CreditsAuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CreditsAuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CreditsAuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ULZAsset.ProtoMod.CheckCredResp CheckCred(global::ULZAsset.ProtoMod.CredReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCred(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.CheckCredResp CheckCred(global::ULZAsset.ProtoMod.CredReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckCred, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.CheckCredResp> CheckCredAsync(global::ULZAsset.ProtoMod.CredReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckCredAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.CheckCredResp> CheckCredAsync(global::ULZAsset.ProtoMod.CredReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckCred, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.CheckCredResp CreateCred(global::ULZAsset.ProtoMod.CredReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCred(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.CheckCredResp CreateCred(global::ULZAsset.ProtoMod.CredReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCred, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.CheckCredResp> CreateCredAsync(global::ULZAsset.ProtoMod.CredReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCredAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.CheckCredResp> CreateCredAsync(global::ULZAsset.ProtoMod.CredReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCred, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::ULZAsset.ProtoMod.CreateCredResp> GetCred(global::ULZAsset.ProtoMod.CredReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCred(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::ULZAsset.ProtoMod.CreateCredResp> GetCred(global::ULZAsset.ProtoMod.CredReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCred, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CreditsAuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CreditsAuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CreditsAuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckCred, serviceImpl.CheckCred)
          .AddMethod(__Method_CreateCred, serviceImpl.CreateCred)
          .AddMethod(__Method_GetCred, serviceImpl.GetCred).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CreditsAuthBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckCred, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp>(serviceImpl.CheckCred));
      serviceBinder.AddMethod(__Method_CreateCred, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CheckCredResp>(serviceImpl.CreateCred));
      serviceBinder.AddMethod(__Method_GetCred, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ULZAsset.ProtoMod.CredReq, global::ULZAsset.ProtoMod.CreateCredResp>(serviceImpl.GetCred));
    }

  }
}
#endregion
