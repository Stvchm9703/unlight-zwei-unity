// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameDuelService/Data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ULZAsset.ProtoMod.GameDuelService {

  /// <summary>Holder for reflection information generated from GameDuelService/Data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for GameDuelService/Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpHYW1lRHVlbFNlcnZpY2UvRGF0YS5wcm90bxIIVUxaUHJvdG8aJEdhbWVE",
          "dWVsU2VydmljZS9FdmVudEhvb2tQaGFzZS5wcm90byLiBAoLR2FtZURhdGFT",
          "ZXQSEAoIcm9vbV9rZXkYASABKAkSDwoHaG9zdF9pZBgCIAEoCRIPCgdkdWVs",
          "X2lkGAMgASgJEhEKCWdhbWVfdHVybhgEIAEoBRItCg5ob3N0X2NhcmRfZGVj",
          "axgFIAMoCzIVLlVMWlByb3RvLkNoYXJDYXJkU2V0Ei0KDmR1ZWxfY2FyZF9k",
          "ZWNrGAYgAygLMhUuVUxaUHJvdG8uQ2hhckNhcmRTZXQSGgoSaG9zdF9jdXJy",
          "X2NhcmRfa2V5GAcgASgFEhoKEmR1ZWxfY3Vycl9jYXJkX2tleRgIIAEoBRIx",
          "ChRob3N0X2V2ZW50X2NhcmRfZGVjaxgJIAMoCzITLlVMWlByb3RvLkV2ZW50",
          "Q2FyZBIxChRkdWVsX2V2ZW50X2NhcmRfZGVjaxgKIAMoCzITLlVMWlByb3Rv",
          "LkV2ZW50Q2FyZBIiCgVyYW5nZRgLIAEoDjITLlVMWlByb3RvLlJhbmdlVHlw",
          "ZRILCgNudm4YDCABKAUSKgoMZmlyc3RfYXR0YWNrGA0gASgOMhQuVUxaUHJv",
          "dG8uUGxheWVyU2lkZRIoCgpjdXJyX3BoYXNlGA4gASgOMhQuVUxaUHJvdG8u",
          "UGxheWVyU2lkZRItCgtldmVudF9waGFzZRgPIAEoDjIYLlVMWlByb3RvLkV2",
          "ZW50SG9va1BoYXNlEioKCWhvb2tfdHlwZRgQIAEoDjIXLlVMWlByb3RvLkV2",
          "ZW50SG9va1R5cGUSLgoOZWZmZWN0X2NvdW50ZXIYESADKAsyFi5VTFpQcm90",
          "by5FZmZlY3RSZXN1bHQi+QEKC0NoYXJDYXJkU2V0Eg8KB2NoYXJfaWQYASAB",
          "KAUSDwoHY2FyZF9pZBgCIAEoBRIPCgdocF9pbnN0GAMgASgFEg8KB2FwX2lu",
          "c3QYBCABKAUSDwoHZHBfaW5zdBgFIAEoBRIPCgdocF9vcmlnGAYgASgFEg8K",
          "B2FwX29yaWcYByABKAUSDwoHZHBfb3JpZxgIIAEoBRINCgVsZXZlbBgJIAEo",
          "BRIoCgtzdGF0dXNfaW5zdBgKIAMoCzITLlVMWlByb3RvLlN0YXR1c1NldBIp",
          "CgdlcXVfc2V0GAsgASgLMhguVUxaUHJvdG8uQ2hhckNhcmRFcXVTZXQiRAoO",
          "Q2hhckNhcmRFcXVTZXQSDgoGZXF1X2lkGAEgASgFEgoKAmhwGAIgASgFEgoK",
          "AmFwGAMgASgFEgoKAmRwGAQgASgFIpACCglFdmVudENhcmQSCgoCaWQYASAB",
          "KAUSKgoJdXBfb3B0aW9uGAIgASgOMhcuVUxaUHJvdG8uRXZlbnRDYXJkVHlw",
          "ZRIOCgZ1cF92YWwYAyABKAUSLAoLZG93bl9vcHRpb24YBCABKA4yFy5VTFpQ",
          "cm90by5FdmVudENhcmRUeXBlEhAKCGRvd25fdmFsGAUgASgFEigKCHBvc2l0",
          "aW9uGAYgASgOMhYuVUxaUHJvdG8uRXZlbnRDYXJkUG9zEhEKCWlzX2ludmVy",
          "dBgHIAEoCBIrCgpmdW5jX21vdW50GAggASgOMhcuVUxaUHJvdG8uRXZlbnRD",
          "YXJkRnVuYxIRCgltb3VudF92YWwYCSABKAUingEKCFNraWxsU2V0EgoKAmlk",
          "GAEgASgFEg8KB2ZlYXRfbm8YAiABKAUSCwoDcG93GAMgASgFEhMKC2NvbmRf",
          "c3RyaW5nGAQgASgJEioKCWNvbmRfY2FyZBgFIAMoCzIXLlVMWlByb3RvLlNr",
          "aWxsQ2FyZENvbmQSJwoKY29uZF9yYW5nZRgGIAMoDjITLlVMWlByb3RvLlJh",
          "bmdlVHlwZSJmCg1Ta2lsbENhcmRDb25kEiUKBHR5cGUYASABKA4yFy5VTFpQ",
          "cm90by5FdmVudENhcmRUeXBlEgsKA3ZhbBgCIAEoBRIhCgdjb21wYXJlGAMg",
          "ASgOMhAuVUxaUHJvdG8uU2lnbkVxIlsKCVN0YXR1c1NldBIKCgJpZBgBIAEo",
          "BRIRCglzdGF0dXNfaWQYAiABKAkSEQoJcmVtYWluX2NkGAMgASgFEg8KB2Zl",
          "YXRfbm8YBCABKAUSCwoDcG93GAUgASgFIswDCgxFZmZlY3RSZXN1bHQSEAoI",
          "dGFyX2NhcmQYASABKAUSJgoIdGFyX3NpZGUYAiABKA4yFC5VTFpQcm90by5Q",
          "bGF5ZXJTaWRlEiwKDHRyaWdnZXJfdGltZRgDIAEoCzIWLlVMWlByb3RvLkVm",
          "ZmVjdFRpbWluZxIoCghlbmRfdGltZRgEIAEoCzIWLlVMWlByb3RvLkVmZmVj",
          "dFRpbWluZxIpCgllZl9vcHRpb24YBSABKA4yFi5VTFpQcm90by5FZmZlY3RP",
          "cHRpb24SCgoCaHAYBiABKAUSCgoCYXAYByABKAUSCgoCZHAYCCABKAUSCgoC",
          "bXAYCSABKAUSFAoMZGlzYWJsZV9tb3ZlGAogASgIEhMKC2Rpc2FibGVfYXRr",
          "GAsgASgIEhMKC2Rpc2FibGVfZGVmGAwgASgIEhQKDGRpc2FibGVfZHJhdxgN",
          "IAEoCBIWCg5kaXNhYmxlX2NoYW5nZRgOIAEoCBIUCgxiaW5kaW5nX2Z1bmMY",
          "DyABKAkSEQoJcmVtYWluX2NkGBAgASgFEhMKC2Fzc2lnbl9mcm9tGBEgASgJ",
          "EhAKCHNraWxsX2lkGBIgASgFEhEKCXN0YXR1c19pZBgTIAEoBSJ8CgxFZmZl",
          "Y3RUaW1pbmcSLQoLZXZlbnRfcGhhc2UYASABKA4yGC5VTFpQcm90by5FdmVu",
          "dEhvb2tQaGFzZRIqCglob29rX3R5cGUYAiABKA4yFy5VTFpQcm90by5FdmVu",
          "dEhvb2tUeXBlEhEKCXN1Yl9jb3VudBgDIAEoBSoiCgpQbGF5ZXJTaWRlEggK",
          "BEhPU1QQABIKCgZEVUVMRVIQASpPCg1FdmVudENhcmRUeXBlEggKBE5VTEwQ",
          "ABIKCgZBVFRBQ0sQARILCgdERUZFTkNFEAISBwoDR1VOEAMSCAoETU9WRRAE",
          "EggKBFNUQVIQBSo/CgxFdmVudENhcmRQb3MSCQoFQkxPQ0sQABIKCgZJTlNJ",
          "REUQARILCgdPVVRTSURFEAISCwoHREVTVFJPWRADKiwKCVJhbmdlVHlwZRIJ",
          "CgVTSE9SVBAAEgoKBk1JRERMRRABEggKBExPTkcQAipMCgxNb3ZlUGhhc2VP",
          "cHQSCwoHTk9fTU9WRRAAEgsKB0ZPUldBUkQQARIMCghCQUNLV0FSRBACEggK",
          "BFNUQVkQAxIKCgZDSEFOR0UQBCrUAQoNRXZlbnRDYXJkRnVuYxIICgRudWxs",
          "EAASFgoSb2NjdXJfY2hhbmNlX2V2ZW50EAESFAoQb2NjdXJfaGVhbF9ldmVu",
          "dBACEhQKEG9jY3VyX2N1cmVfZXZlbnQQAxIVChFvY2N1cl9xdWlja19ldmVu",
          "dBAEEhUKEW9jY3VyX2N1cnNlX2V2ZW50EAUSFwoTb2NjdXJfY2hhbGljZV9l",
          "dmVudBAGEhYKEm9jY3VyX3BvaXNvbl9ldmVudBAHEhYKEm9jY3VyX2RhbWFn",
          "ZV9ldmVudBAIKjUKBlNpZ25FcRIJCgVFUVVBTBAAEgsKB0dSRUFURVIQARIK",
          "CgZMRVNTRVIQAhIHCgNBTlkQAypnCgxFZmZlY3RPcHRpb24SEwoPU3RhdHVz",
          "X0FkZGl0aW9uEAASEwoPSW5zdGFuY2VfQ2hhbmdlEAESEwoPU3RhdHVzX0Zp",
          "eFZhbHVlEAISGAoUSGFyZF9JbnN0YW5jZV9DaGFuZ2UQA0ItWgcuO3Byb3Rv",
          "qgIhVUxaQXNzZXQuUHJvdG9Nb2QuR2FtZUR1ZWxTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ULZAsset.ProtoMod.GameDuelService.EventHookPhaseReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new [] { typeof(global::ULZAsset.ProtoMod.GameDuelService.PlayerSide), typeof(global::ULZAsset.ProtoMod.GameDuelService.EventCardType), typeof(global::ULZAsset.ProtoMod.GameDuelService.EventCardPos), typeof(global::ULZAsset.ProtoMod.GameDuelService.RangeType), typeof(global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt), typeof(global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc), typeof(global::ULZAsset.ProtoMod.GameDuelService.SignEq), typeof(global::ULZAsset.ProtoMod.GameDuelService.EffectOption), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GameDataSet), global::ULZAsset.ProtoMod.GameDuelService.GameDataSet.Parser, new [] { "RoomKey", "HostId", "DuelId", "GameTurn", "HostCardDeck", "DuelCardDeck", "HostCurrCardKey", "DuelCurrCardKey", "HostEventCardDeck", "DuelEventCardDeck", "Range", "Nvn", "FirstAttack", "CurrPhase", "EventPhase", "HookType", "EffectCounter" }, null, null,  null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.CharCardSet), global::ULZAsset.ProtoMod.GameDuelService.CharCardSet.Parser, new [] { "CharId", "CardId", "HpInst", "ApInst", "DpInst", "HpOrig", "ApOrig", "DpOrig", "Level", "StatusInst", "EquSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet), global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet.Parser, new [] { "EquId", "Hp", "Ap", "Dp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.EventCard), global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser, new [] { "Id", "UpOption", "UpVal", "DownOption", "DownVal", "Position", "IsInvert", "FuncMount", "MountVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.SkillSet), global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser, new [] { "Id", "FeatNo", "Pow", "CondString", "CondCard", "CondRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond), global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond.Parser, new [] { "Type", "Val", "Compare" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.StatusSet), global::ULZAsset.ProtoMod.GameDuelService.StatusSet.Parser, new [] { "Id", "StatusId", "RemainCd", "FeatNo", "Pow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.EffectResult), global::ULZAsset.ProtoMod.GameDuelService.EffectResult.Parser, new [] { "TarCard", "TarSide", "TriggerTime", "EndTime", "EfOption", "Hp", "Ap", "Dp", "Mp", "DisableMove", "DisableAtk", "DisableDef", "DisableDraw", "DisableChange", "BindingFunc", "RemainCd", "AssignFrom", "SkillId", "StatusId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.EffectTiming), global::ULZAsset.ProtoMod.GameDuelService.EffectTiming.Parser, new [] { "EventPhase", "HookType", "SubCount" }, null, null, null)
        }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// -------------------------------------------------------------
  /// ANCHOR: data-struct for all game struct
  /// SECTION: Data.proto
  /// </summary>
  public enum PlayerSide {
    [pbr::OriginalName("HOST")] Host = 0, [pbr::OriginalName("DUELER")] Dueler = 1,
  }

  public enum EventCardType {
    [pbr::OriginalName("NULL")] Null = 0, [pbr::OriginalName("ATTACK")] Attack = 1, [pbr::OriginalName("DEFENCE")] Defence = 2, [pbr::OriginalName("GUN")] Gun = 3, [pbr::OriginalName("MOVE")] Move = 4, [pbr::OriginalName("STAR")] Star = 5,
  }

  public enum EventCardPos {
    [pbr::OriginalName("BLOCK")] Block = 0, [pbr::OriginalName("INSIDE")] Inside = 1, [pbr::OriginalName("OUTSIDE")] Outside = 2, [pbr::OriginalName("DESTROY")] Destroy = 3,
  }

  public enum RangeType {
    [pbr::OriginalName("SHORT")] Short = 0, [pbr::OriginalName("MIDDLE")] Middle = 1, [pbr::OriginalName("LONG")] Long = 2,
  }

  public enum MovePhaseOpt {
    [pbr::OriginalName("NO_MOVE")] NoMove = 0, [pbr::OriginalName("FORWARD")] Forward = 1, [pbr::OriginalName("BACKWARD")] Backward = 2, [pbr::OriginalName("STAY")] Stay = 3, [pbr::OriginalName("CHANGE")] Change = 4,
  }

  public enum EventCardFunc {
    [pbr::OriginalName("null")] Null = 0, [pbr::OriginalName("occur_chance_event")] OccurChanceEvent = 1, [pbr::OriginalName("occur_heal_event")] OccurHealEvent = 2, [pbr::OriginalName("occur_cure_event")] OccurCureEvent = 3, [pbr::OriginalName("occur_quick_event")] OccurQuickEvent = 4, [pbr::OriginalName("occur_curse_event")] OccurCurseEvent = 5, [pbr::OriginalName("occur_chalice_event")] OccurChaliceEvent = 6, [pbr::OriginalName("occur_poison_event")] OccurPoisonEvent = 7, [pbr::OriginalName("occur_damage_event")] OccurDamageEvent = 8,
  }

  public enum SignEq {
    [pbr::OriginalName("EQUAL")] Equal = 0, [pbr::OriginalName("GREATER")] Greater = 1, [pbr::OriginalName("LESSER")] Lesser = 2, [pbr::OriginalName("ANY")] Any = 3,
  }

  public enum EffectOption {
    /// <summary>
    /// Status_Addition :
    ///    like +3-Move, by cd to change the +/- value
    /// </summary>
    [pbr::OriginalName("Status_Addition")] StatusAddition = 0,
    /// <summary>
    ///  Instance_Change :
    ///    like posion, it will -1 to inst_value in CC
    /// </summary>
    [pbr::OriginalName("Instance_Change")] InstanceChange = 1,
    /// <summary>
    /// Status_FixVal :
    ///    like Ex Indomitable Spirit , it will last one blood
    /// </summary>
    [pbr::OriginalName("Status_FixValue")] StatusFixValue = 2,
    /// <summary>
    /// Hard_Status_FicValue,
    /// Somehow, Some Damage is 
    /// "whatever card is not current use, but still give the damn damage"
    /// </summary>
    [pbr::OriginalName("Hard_Instance_Change")] HardInstanceChange = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// GameDataSet 
  ///      the whole instance game-duel set 
  /// </summary>
  public sealed partial class GameDataSet : pb::IMessage<GameDataSet> {
    private static readonly pb::MessageParser<GameDataSet> _parser = new pb::MessageParser<GameDataSet>(() => new GameDataSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDataSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDataSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDataSet(GameDataSet other) : this() {
      roomKey_ = other.roomKey_;
      hostId_ = other.hostId_;
      duelId_ = other.duelId_;
      gameTurn_ = other.gameTurn_;
      hostCardDeck_ = other.hostCardDeck_.Clone();
      duelCardDeck_ = other.duelCardDeck_.Clone();
      hostCurrCardKey_ = other.hostCurrCardKey_;
      duelCurrCardKey_ = other.duelCurrCardKey_;
      hostEventCardDeck_ = other.hostEventCardDeck_.Clone();
      duelEventCardDeck_ = other.duelEventCardDeck_.Clone();
      range_ = other.range_;
      nvn_ = other.nvn_;
      firstAttack_ = other.firstAttack_;
      currPhase_ = other.currPhase_;
      eventPhase_ = other.eventPhase_;
      hookType_ = other.hookType_;
      effectCounter_ = other.effectCounter_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDataSet Clone() {
      return new GameDataSet(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    /// <summary>
    ///  room_key, see also RoomService/message.proto : Room 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_id" field.</summary>
    public const int HostIdFieldNumber = 2;
    private string hostId_ = "";
    /// <summary>
    ///  host_id, the user-id of host player 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostId {
      get { return hostId_; }
      set {
        hostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duel_id" field.</summary>
    public const int DuelIdFieldNumber = 3;
    private string duelId_ = "";
    /// <summary>
    ///  dueler_id, the user-id of dueler player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DuelId {
      get { return duelId_; }
      set {
        duelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_turn" field.</summary>
    public const int GameTurnFieldNumber = 4;
    private int gameTurn_;
    /// <summary>
    ///  game_turn, the number of turns in game
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTurn {
      get { return gameTurn_; }
      set {
        gameTurn_ = value;
      }
    }

    /// <summary>Field number for the "host_card_deck" field.</summary>
    public const int HostCardDeckFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> _repeated_hostCardDeck_codec = pb::FieldCodec.ForMessage(42, global::ULZAsset.ProtoMod.GameDuelService.CharCardSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> hostCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet>();
    /// <summary>
    ///  host_card_deck, the character card  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> HostCardDeck {
      get { return hostCardDeck_; }
    }

    /// <summary>Field number for the "duel_card_deck" field.</summary>
    public const int DuelCardDeckFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> _repeated_duelCardDeck_codec = pb::FieldCodec.ForMessage(50, global::ULZAsset.ProtoMod.GameDuelService.CharCardSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> duelCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet>();
    /// <summary>
    ///  duel_card_deck, the character card
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> DuelCardDeck {
      get { return duelCardDeck_; }
    }

    /// <summary>Field number for the "host_curr_card_key" field.</summary>
    public const int HostCurrCardKeyFieldNumber = 7;
    private int hostCurrCardKey_;
    /// <summary>
    ///  host_curr_card, current on-used char-card 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HostCurrCardKey {
      get { return hostCurrCardKey_; }
      set {
        hostCurrCardKey_ = value;
      }
    }

    /// <summary>Field number for the "duel_curr_card_key" field.</summary>
    public const int DuelCurrCardKeyFieldNumber = 8;
    private int duelCurrCardKey_;
    /// <summary>
    ///  dueler_curr_card, current on-used char-card 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DuelCurrCardKey {
      get { return duelCurrCardKey_; }
      set {
        duelCurrCardKey_ = value;
      }
    }

    /// <summary>Field number for the "host_event_card_deck" field.</summary>
    public const int HostEventCardDeckFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_hostEventCardDeck_codec = pb::FieldCodec.ForMessage(74, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> hostEventCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    /// <summary>
    ///  host_event_card_deck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> HostEventCardDeck {
      get { return hostEventCardDeck_; }
    }

    /// <summary>Field number for the "duel_event_card_deck" field.</summary>
    public const int DuelEventCardDeckFieldNumber = 10;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_duelEventCardDeck_codec = pb::FieldCodec.ForMessage(82, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> duelEventCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    /// <summary>
    ///  duel_event_card_deck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> DuelEventCardDeck {
      get { return duelEventCardDeck_; }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 11;
    private global::ULZAsset.ProtoMod.GameDuelService.RangeType range_ = global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short;
    /// <summary>
    ///  curr_range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.RangeType Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "nvn" field.</summary>
    public const int NvnFieldNumber = 12;
    private int nvn_;
    /// <summary>
    /// nvn 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nvn {
      get { return nvn_; }
      set {
        nvn_ = value;
      }
    }

    /// <summary>Field number for the "first_attack" field.</summary>
    public const int FirstAttackFieldNumber = 13;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide firstAttack_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide FirstAttack {
      get { return firstAttack_; }
      set {
        firstAttack_ = value;
      }
    }

    /// <summary>Field number for the "curr_phase" field.</summary>
    public const int CurrPhaseFieldNumber = 14;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide currPhase_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide CurrPhase {
      get { return currPhase_; }
      set {
        currPhase_ = value;
      }
    }

    /// <summary>Field number for the "event_phase" field.</summary>
    public const int EventPhaseFieldNumber = 15;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase eventPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    /// <summary>
    ///  event_phase, the event hook phase 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase EventPhase {
      get { return eventPhase_; }
      set {
        eventPhase_ = value;
      }
    }

    /// <summary>Field number for the "hook_type" field.</summary>
    public const int HookTypeFieldNumber = 16;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookType hookType_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant;
    /// <summary>
    ///  hook_type, the event hook type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookType HookType {
      get { return hookType_; }
      set {
        hookType_ = value;
      }
    }

    /// <summary>Field number for the "effect_counter" field.</summary>
    public const int EffectCounterFieldNumber = 17;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> _repeated_effectCounter_codec = pb::FieldCodec.ForMessage(138, global::ULZAsset.ProtoMod.GameDuelService.EffectResult.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> effectCounter_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult>();
    /// <summary>
    ///  Effect-result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> EffectCounter {
      get { return effectCounter_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDataSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDataSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (HostId != other.HostId)return false;
      if (DuelId != other.DuelId)return false;
      if (GameTurn != other.GameTurn)return false;
      if (!hostCardDeck_.Equals(other.hostCardDeck_))return false;
      if (!duelCardDeck_.Equals(other.duelCardDeck_))return false;
      if (HostCurrCardKey != other.HostCurrCardKey)return false;
      if (DuelCurrCardKey != other.DuelCurrCardKey)return false;
      if (!hostEventCardDeck_.Equals(other.hostEventCardDeck_))return false;
      if (!duelEventCardDeck_.Equals(other.duelEventCardDeck_))return false;
      if (Range != other.Range)return false;
      if (Nvn != other.Nvn)return false;
      if (FirstAttack != other.FirstAttack)return false;
      if (CurrPhase != other.CurrPhase)return false;
      if (EventPhase != other.EventPhase)return false;
      if (HookType != other.HookType)return false;
      if (!effectCounter_.Equals(other.effectCounter_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (HostId.Length != 0)hash ^= HostId.GetHashCode();
      if (DuelId.Length != 0)hash ^= DuelId.GetHashCode();
      if (GameTurn != 0)hash ^= GameTurn.GetHashCode();
      hash ^= hostCardDeck_.GetHashCode();
      hash ^= duelCardDeck_.GetHashCode();
      if (HostCurrCardKey != 0)hash ^= HostCurrCardKey.GetHashCode();
      if (DuelCurrCardKey != 0)hash ^= DuelCurrCardKey.GetHashCode();
      hash ^= hostEventCardDeck_.GetHashCode();
      hash ^= duelEventCardDeck_.GetHashCode();
      if (Range != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short)hash ^= Range.GetHashCode();
      if (Nvn != 0)hash ^= Nvn.GetHashCode();
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= FirstAttack.GetHashCode();
      if (CurrPhase != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= CurrPhase.GetHashCode();
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= EventPhase.GetHashCode();
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant)hash ^= HookType.GetHashCode();
      hash ^= effectCounter_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (HostId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostId);
      }
      if (DuelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DuelId);
      }
      if (GameTurn != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameTurn);
      }
      hostCardDeck_.WriteTo(output, _repeated_hostCardDeck_codec);
      duelCardDeck_.WriteTo(output, _repeated_duelCardDeck_codec);
      if (HostCurrCardKey != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HostCurrCardKey);
      }
      if (DuelCurrCardKey != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DuelCurrCardKey);
      }
      hostEventCardDeck_.WriteTo(output, _repeated_hostEventCardDeck_codec);
      duelEventCardDeck_.WriteTo(output, _repeated_duelEventCardDeck_codec);
      if (Range != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        output.WriteRawTag(88);
        output.WriteEnum((int)Range);
      }
      if (Nvn != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Nvn);
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(104);
        output.WriteEnum((int)FirstAttack);
      }
      if (CurrPhase != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(112);
        output.WriteEnum((int)CurrPhase);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(120);
        output.WriteEnum((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int)HookType);
      }
      effectCounter_.WriteTo(output, _repeated_effectCounter_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (HostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostId);
      }
      if (DuelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DuelId);
      }
      if (GameTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTurn);
      }
      size += hostCardDeck_.CalculateSize(_repeated_hostCardDeck_codec);
      size += duelCardDeck_.CalculateSize(_repeated_duelCardDeck_codec);
      if (HostCurrCardKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostCurrCardKey);
      }
      if (DuelCurrCardKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuelCurrCardKey);
      }
      size += hostEventCardDeck_.CalculateSize(_repeated_hostEventCardDeck_codec);
      size += duelEventCardDeck_.CalculateSize(_repeated_duelEventCardDeck_codec);
      if (Range != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Range);
      }
      if (Nvn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nvn);
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FirstAttack);
      }
      if (CurrPhase != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrPhase);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)HookType);
      }
      size += effectCounter_.CalculateSize(_repeated_effectCounter_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDataSet other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.HostId.Length != 0) {
        HostId = other.HostId;
      }
      if (other.DuelId.Length != 0) {
        DuelId = other.DuelId;
      }
      if (other.GameTurn != 0) {
        GameTurn = other.GameTurn;
      }
      hostCardDeck_.Add(other.hostCardDeck_);
      duelCardDeck_.Add(other.duelCardDeck_);
      if (other.HostCurrCardKey != 0) {
        HostCurrCardKey = other.HostCurrCardKey;
      }
      if (other.DuelCurrCardKey != 0) {
        DuelCurrCardKey = other.DuelCurrCardKey;
      }
      hostEventCardDeck_.Add(other.hostEventCardDeck_);
      duelEventCardDeck_.Add(other.duelEventCardDeck_);
      if (other.Range != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        Range = other.Range;
      }
      if (other.Nvn != 0) {
        Nvn = other.Nvn;
      }
      if (other.FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        FirstAttack = other.FirstAttack;
      }
      if (other.CurrPhase != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        CurrPhase = other.CurrPhase;
      }
      if (other.EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        EventPhase = other.EventPhase;
      }
      if (other.HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        HookType = other.HookType;
      }
      effectCounter_.Add(other.effectCounter_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 18:
            {
              HostId = input.ReadString();
              break;
            }
          case 26:
            {
              DuelId = input.ReadString();
              break;
            }
          case 32:
            {
              GameTurn = input.ReadInt32();
              break;
            }
          case 42:
            {
              hostCardDeck_.AddEntriesFrom(input, _repeated_hostCardDeck_codec);
              break;
            }
          case 50:
            {
              duelCardDeck_.AddEntriesFrom(input, _repeated_duelCardDeck_codec);
              break;
            }
          case 56:
            {
              HostCurrCardKey = input.ReadInt32();
              break;
            }
          case 64:
            {
              DuelCurrCardKey = input.ReadInt32();
              break;
            }
          case 74:
            {
              hostEventCardDeck_.AddEntriesFrom(input, _repeated_hostEventCardDeck_codec);
              break;
            }
          case 82:
            {
              duelEventCardDeck_.AddEntriesFrom(input, _repeated_duelEventCardDeck_codec);
              break;
            }
          case 88:
            {
              Range = (global::ULZAsset.ProtoMod.GameDuelService.RangeType)input.ReadEnum();
              break;
            }
          case 96:
            {
              Nvn = input.ReadInt32();
              break;
            }
          case 104:
            {
              FirstAttack = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 112:
            {
              CurrPhase = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 120:
            {
              EventPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 128:
            {
              HookType = (global::ULZAsset.ProtoMod.GameDuelService.EventHookType)input.ReadEnum();
              break;
            }
          case 138:
            {
              effectCounter_.AddEntriesFrom(input, _repeated_effectCounter_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// CharCardSet 
  /// 
  /// </summary>
  public sealed partial class CharCardSet : pb::IMessage<CharCardSet> {
    private static readonly pb::MessageParser<CharCardSet> _parser = new pb::MessageParser<CharCardSet>(() => new CharCardSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharCardSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardSet(CharCardSet other) : this() {
      charId_ = other.charId_;
      cardId_ = other.cardId_;
      hpInst_ = other.hpInst_;
      apInst_ = other.apInst_;
      dpInst_ = other.dpInst_;
      hpOrig_ = other.hpOrig_;
      apOrig_ = other.apOrig_;
      dpOrig_ = other.dpOrig_;
      level_ = other.level_;
      statusInst_ = other.statusInst_.Clone();
      equSet_ = other.equSet_ != null ? other.equSet_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardSet Clone() {
      return new CharCardSet(this);
    }

    /// <summary>Field number for the "char_id" field.</summary>
    public const int CharIdFieldNumber = 1;
    private int charId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharId {
      get { return charId_; }
      set {
        charId_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "hp_inst" field.</summary>
    public const int HpInstFieldNumber = 3;
    private int hpInst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpInst {
      get { return hpInst_; }
      set {
        hpInst_ = value;
      }
    }

    /// <summary>Field number for the "ap_inst" field.</summary>
    public const int ApInstFieldNumber = 4;
    private int apInst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApInst {
      get { return apInst_; }
      set {
        apInst_ = value;
      }
    }

    /// <summary>Field number for the "dp_inst" field.</summary>
    public const int DpInstFieldNumber = 5;
    private int dpInst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpInst {
      get { return dpInst_; }
      set {
        dpInst_ = value;
      }
    }

    /// <summary>Field number for the "hp_orig" field.</summary>
    public const int HpOrigFieldNumber = 6;
    private int hpOrig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpOrig {
      get { return hpOrig_; }
      set {
        hpOrig_ = value;
      }
    }

    /// <summary>Field number for the "ap_orig" field.</summary>
    public const int ApOrigFieldNumber = 7;
    private int apOrig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApOrig {
      get { return apOrig_; }
      set {
        apOrig_ = value;
      }
    }

    /// <summary>Field number for the "dp_orig" field.</summary>
    public const int DpOrigFieldNumber = 8;
    private int dpOrig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DpOrig {
      get { return dpOrig_; }
      set {
        dpOrig_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 9;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "status_inst" field.</summary>
    public const int StatusInstFieldNumber = 10;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.StatusSet> _repeated_statusInst_codec = pb::FieldCodec.ForMessage(82, global::ULZAsset.ProtoMod.GameDuelService.StatusSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.StatusSet> statusInst_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.StatusSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.StatusSet> StatusInst {
      get { return statusInst_; }
    }

    /// <summary>Field number for the "equ_set" field.</summary>
    public const int EquSetFieldNumber = 11;
    private global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet equSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet EquSet {
      get { return equSet_; }
      set {
        equSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharCardSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharCardSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharId != other.CharId)return false;
      if (CardId != other.CardId)return false;
      if (HpInst != other.HpInst)return false;
      if (ApInst != other.ApInst)return false;
      if (DpInst != other.DpInst)return false;
      if (HpOrig != other.HpOrig)return false;
      if (ApOrig != other.ApOrig)return false;
      if (DpOrig != other.DpOrig)return false;
      if (Level != other.Level)return false;
      if (!statusInst_.Equals(other.statusInst_))return false;
      if (!object.Equals(EquSet, other.EquSet))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharId != 0)hash ^= CharId.GetHashCode();
      if (CardId != 0)hash ^= CardId.GetHashCode();
      if (HpInst != 0)hash ^= HpInst.GetHashCode();
      if (ApInst != 0)hash ^= ApInst.GetHashCode();
      if (DpInst != 0)hash ^= DpInst.GetHashCode();
      if (HpOrig != 0)hash ^= HpOrig.GetHashCode();
      if (ApOrig != 0)hash ^= ApOrig.GetHashCode();
      if (DpOrig != 0)hash ^= DpOrig.GetHashCode();
      if (Level != 0)hash ^= Level.GetHashCode();
      hash ^= statusInst_.GetHashCode();
      if (equSet_ != null)hash ^= EquSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharId);
      }
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (HpInst != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpInst);
      }
      if (ApInst != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApInst);
      }
      if (DpInst != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DpInst);
      }
      if (HpOrig != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HpOrig);
      }
      if (ApOrig != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ApOrig);
      }
      if (DpOrig != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DpOrig);
      }
      if (Level != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Level);
      }
      statusInst_.WriteTo(output, _repeated_statusInst_codec);
      if (equSet_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EquSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharId);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (HpInst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpInst);
      }
      if (ApInst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApInst);
      }
      if (DpInst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpInst);
      }
      if (HpOrig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpOrig);
      }
      if (ApOrig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApOrig);
      }
      if (DpOrig != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DpOrig);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += statusInst_.CalculateSize(_repeated_statusInst_codec);
      if (equSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquSet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharCardSet other) {
      if (other == null) {
        return;
      }
      if (other.CharId != 0) {
        CharId = other.CharId;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.HpInst != 0) {
        HpInst = other.HpInst;
      }
      if (other.ApInst != 0) {
        ApInst = other.ApInst;
      }
      if (other.DpInst != 0) {
        DpInst = other.DpInst;
      }
      if (other.HpOrig != 0) {
        HpOrig = other.HpOrig;
      }
      if (other.ApOrig != 0) {
        ApOrig = other.ApOrig;
      }
      if (other.DpOrig != 0) {
        DpOrig = other.DpOrig;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      statusInst_.Add(other.statusInst_);
      if (other.equSet_ != null) {
        if (equSet_ == null) {
          EquSet = new global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet();
        }
        EquSet.MergeFrom(other.EquSet);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              CharId = input.ReadInt32();
              break;
            }
          case 16:
            {
              CardId = input.ReadInt32();
              break;
            }
          case 24:
            {
              HpInst = input.ReadInt32();
              break;
            }
          case 32:
            {
              ApInst = input.ReadInt32();
              break;
            }
          case 40:
            {
              DpInst = input.ReadInt32();
              break;
            }
          case 48:
            {
              HpOrig = input.ReadInt32();
              break;
            }
          case 56:
            {
              ApOrig = input.ReadInt32();
              break;
            }
          case 64:
            {
              DpOrig = input.ReadInt32();
              break;
            }
          case 72:
            {
              Level = input.ReadInt32();
              break;
            }
          case 82:
            {
              statusInst_.AddEntriesFrom(input, _repeated_statusInst_codec);
              break;
            }
          case 90:
            {
              if (equSet_ == null) {
                EquSet = new global::ULZAsset.ProtoMod.GameDuelService.CharCardEquSet();
              }
              input.ReadMessage(EquSet);
              break;
            }
        }
      }
    }

  }

  public sealed partial class CharCardEquSet : pb::IMessage<CharCardEquSet> {
    private static readonly pb::MessageParser<CharCardEquSet> _parser = new pb::MessageParser<CharCardEquSet>(() => new CharCardEquSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharCardEquSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardEquSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardEquSet(CharCardEquSet other) : this() {
      equId_ = other.equId_;
      hp_ = other.hp_;
      ap_ = other.ap_;
      dp_ = other.dp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCardEquSet Clone() {
      return new CharCardEquSet(this);
    }

    /// <summary>Field number for the "equ_id" field.</summary>
    public const int EquIdFieldNumber = 1;
    private int equId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquId {
      get { return equId_; }
      set {
        equId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 3;
    private int ap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "dp" field.</summary>
    public const int DpFieldNumber = 4;
    private int dp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dp {
      get { return dp_; }
      set {
        dp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharCardEquSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharCardEquSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquId != other.EquId)return false;
      if (Hp != other.Hp)return false;
      if (Ap != other.Ap)return false;
      if (Dp != other.Dp)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquId != 0)hash ^= EquId.GetHashCode();
      if (Hp != 0)hash ^= Hp.GetHashCode();
      if (Ap != 0)hash ^= Ap.GetHashCode();
      if (Dp != 0)hash ^= Dp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquId);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Ap != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ap);
      }
      if (Dp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Dp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ap);
      }
      if (Dp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharCardEquSet other) {
      if (other == null) {
        return;
      }
      if (other.EquId != 0) {
        EquId = other.EquId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.Dp != 0) {
        Dp = other.Dp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              EquId = input.ReadInt32();
              break;
            }
          case 16:
            {
              Hp = input.ReadInt32();
              break;
            }
          case 24:
            {
              Ap = input.ReadInt32();
              break;
            }
          case 32:
            {
              Dp = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  public sealed partial class EventCard : pb::IMessage<EventCard> {
    private static readonly pb::MessageParser<EventCard> _parser = new pb::MessageParser<EventCard>(() => new EventCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCard(EventCard other) : this() {
      id_ = other.id_;
      upOption_ = other.upOption_;
      upVal_ = other.upVal_;
      downOption_ = other.downOption_;
      downVal_ = other.downVal_;
      position_ = other.position_;
      isInvert_ = other.isInvert_;
      funcMount_ = other.funcMount_;
      mountVal_ = other.mountVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventCard Clone() {
      return new EventCard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "up_option" field.</summary>
    public const int UpOptionFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardType upOption_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardType UpOption {
      get { return upOption_; }
      set {
        upOption_ = value;
      }
    }

    /// <summary>Field number for the "up_val" field.</summary>
    public const int UpValFieldNumber = 3;
    private int upVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpVal {
      get { return upVal_; }
      set {
        upVal_ = value;
      }
    }

    /// <summary>Field number for the "down_option" field.</summary>
    public const int DownOptionFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardType downOption_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardType DownOption {
      get { return downOption_; }
      set {
        downOption_ = value;
      }
    }

    /// <summary>Field number for the "down_val" field.</summary>
    public const int DownValFieldNumber = 5;
    private int downVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownVal {
      get { return downVal_; }
      set {
        downVal_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardPos position_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardPos Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "is_invert" field.</summary>
    public const int IsInvertFieldNumber = 7;
    private bool isInvert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvert {
      get { return isInvert_; }
      set {
        isInvert_ = value;
      }
    }

    /// <summary>Field number for the "func_mount" field.</summary>
    public const int FuncMountFieldNumber = 8;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc funcMount_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc.Null;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc FuncMount {
      get { return funcMount_; }
      set {
        funcMount_ = value;
      }
    }

    /// <summary>Field number for the "mount_val" field.</summary>
    public const int MountValFieldNumber = 9;
    private int mountVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MountVal {
      get { return mountVal_; }
      set {
        mountVal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id)return false;
      if (UpOption != other.UpOption)return false;
      if (UpVal != other.UpVal)return false;
      if (DownOption != other.DownOption)return false;
      if (DownVal != other.DownVal)return false;
      if (Position != other.Position)return false;
      if (IsInvert != other.IsInvert)return false;
      if (FuncMount != other.FuncMount)return false;
      if (MountVal != other.MountVal)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0)hash ^= Id.GetHashCode();
      if (UpOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null)hash ^= UpOption.GetHashCode();
      if (UpVal != 0)hash ^= UpVal.GetHashCode();
      if (DownOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null)hash ^= DownOption.GetHashCode();
      if (DownVal != 0)hash ^= DownVal.GetHashCode();
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block)hash ^= Position.GetHashCode();
      if (IsInvert != false)hash ^= IsInvert.GetHashCode();
      if (FuncMount != global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc.Null)hash ^= FuncMount.GetHashCode();
      if (MountVal != 0)hash ^= MountVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (UpOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        output.WriteRawTag(16);
        output.WriteEnum((int)UpOption);
      }
      if (UpVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpVal);
      }
      if (DownOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        output.WriteRawTag(32);
        output.WriteEnum((int)DownOption);
      }
      if (DownVal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DownVal);
      }
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        output.WriteRawTag(48);
        output.WriteEnum((int)Position);
      }
      if (IsInvert != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsInvert);
      }
      if (FuncMount != global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc.Null) {
        output.WriteRawTag(64);
        output.WriteEnum((int)FuncMount);
      }
      if (MountVal != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MountVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (UpOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)UpOption);
      }
      if (UpVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpVal);
      }
      if (DownOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DownOption);
      }
      if (DownVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownVal);
      }
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Position);
      }
      if (IsInvert != false) {
        size += 1 + 1;
      }
      if (FuncMount != global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc.Null) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FuncMount);
      }
      if (MountVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MountVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventCard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.UpOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        UpOption = other.UpOption;
      }
      if (other.UpVal != 0) {
        UpVal = other.UpVal;
      }
      if (other.DownOption != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        DownOption = other.DownOption;
      }
      if (other.DownVal != 0) {
        DownVal = other.DownVal;
      }
      if (other.Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        Position = other.Position;
      }
      if (other.IsInvert != false) {
        IsInvert = other.IsInvert;
      }
      if (other.FuncMount != global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc.Null) {
        FuncMount = other.FuncMount;
      }
      if (other.MountVal != 0) {
        MountVal = other.MountVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Id = input.ReadInt32();
              break;
            }
          case 16:
            {
              UpOption = (global::ULZAsset.ProtoMod.GameDuelService.EventCardType)input.ReadEnum();
              break;
            }
          case 24:
            {
              UpVal = input.ReadInt32();
              break;
            }
          case 32:
            {
              DownOption = (global::ULZAsset.ProtoMod.GameDuelService.EventCardType)input.ReadEnum();
              break;
            }
          case 40:
            {
              DownVal = input.ReadInt32();
              break;
            }
          case 48:
            {
              Position = (global::ULZAsset.ProtoMod.GameDuelService.EventCardPos)input.ReadEnum();
              break;
            }
          case 56:
            {
              IsInvert = input.ReadBool();
              break;
            }
          case 64:
            {
              FuncMount = (global::ULZAsset.ProtoMod.GameDuelService.EventCardFunc)input.ReadEnum();
              break;
            }
          case 72:
            {
              MountVal = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  public sealed partial class SkillSet : pb::IMessage<SkillSet> {
    private static readonly pb::MessageParser<SkillSet> _parser = new pb::MessageParser<SkillSet>(() => new SkillSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSet(SkillSet other) : this() {
      id_ = other.id_;
      featNo_ = other.featNo_;
      pow_ = other.pow_;
      condString_ = other.condString_;
      condCard_ = other.condCard_.Clone();
      condRange_ = other.condRange_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillSet Clone() {
      return new SkillSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "feat_no" field.</summary>
    public const int FeatNoFieldNumber = 2;
    private int featNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeatNo {
      get { return featNo_; }
      set {
        featNo_ = value;
      }
    }

    /// <summary>Field number for the "pow" field.</summary>
    public const int PowFieldNumber = 3;
    private int pow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pow {
      get { return pow_; }
      set {
        pow_ = value;
      }
    }

    /// <summary>Field number for the "cond_string" field.</summary>
    public const int CondStringFieldNumber = 4;
    private string condString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CondString {
      get { return condString_; }
      set {
        condString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cond_card" field.</summary>
    public const int CondCardFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond> _repeated_condCard_codec = pb::FieldCodec.ForMessage(42, global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond> condCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillCardCond> CondCard {
      get { return condCard_; }
    }

    /// <summary>Field number for the "cond_range" field.</summary>
    public const int CondRangeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.RangeType> _repeated_condRange_codec = pb::FieldCodec.ForEnum(50, x => (int)x, x => (global::ULZAsset.ProtoMod.GameDuelService.RangeType)x);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.RangeType> condRange_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.RangeType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.RangeType> CondRange {
      get { return condRange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id)return false;
      if (FeatNo != other.FeatNo)return false;
      if (Pow != other.Pow)return false;
      if (CondString != other.CondString)return false;
      if (!condCard_.Equals(other.condCard_))return false;
      if (!condRange_.Equals(other.condRange_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0)hash ^= Id.GetHashCode();
      if (FeatNo != 0)hash ^= FeatNo.GetHashCode();
      if (Pow != 0)hash ^= Pow.GetHashCode();
      if (CondString.Length != 0)hash ^= CondString.GetHashCode();
      hash ^= condCard_.GetHashCode();
      hash ^= condRange_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FeatNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FeatNo);
      }
      if (Pow != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pow);
      }
      if (CondString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CondString);
      }
      condCard_.WriteTo(output, _repeated_condCard_codec);
      condRange_.WriteTo(output, _repeated_condRange_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FeatNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeatNo);
      }
      if (Pow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pow);
      }
      if (CondString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CondString);
      }
      size += condCard_.CalculateSize(_repeated_condCard_codec);
      size += condRange_.CalculateSize(_repeated_condRange_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillSet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FeatNo != 0) {
        FeatNo = other.FeatNo;
      }
      if (other.Pow != 0) {
        Pow = other.Pow;
      }
      if (other.CondString.Length != 0) {
        CondString = other.CondString;
      }
      condCard_.Add(other.condCard_);
      condRange_.Add(other.condRange_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Id = input.ReadInt32();
              break;
            }
          case 16:
            {
              FeatNo = input.ReadInt32();
              break;
            }
          case 24:
            {
              Pow = input.ReadInt32();
              break;
            }
          case 34:
            {
              CondString = input.ReadString();
              break;
            }
          case 42:
            {
              condCard_.AddEntriesFrom(input, _repeated_condCard_codec);
              break;
            }
          case 50:
              case 48:
            {
              condRange_.AddEntriesFrom(input, _repeated_condRange_codec);
              break;
            }
        }
      }
    }

  }

  public sealed partial class SkillCardCond : pb::IMessage<SkillCardCond> {
    private static readonly pb::MessageParser<SkillCardCond> _parser = new pb::MessageParser<SkillCardCond>(() => new SkillCardCond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillCardCond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCardCond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCardCond(SkillCardCond other) : this() {
      type_ = other.type_;
      val_ = other.val_;
      compare_ = other.compare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillCardCond Clone() {
      return new SkillCardCond(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardType type_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private int val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    /// <summary>Field number for the "compare" field.</summary>
    public const int CompareFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.SignEq compare_ = global::ULZAsset.ProtoMod.GameDuelService.SignEq.Equal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.SignEq Compare {
      get { return compare_; }
      set {
        compare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillCardCond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillCardCond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type)return false;
      if (Val != other.Val)return false;
      if (Compare != other.Compare)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null)hash ^= Type.GetHashCode();
      if (Val != 0)hash ^= Val.GetHashCode();
      if (Compare != global::ULZAsset.ProtoMod.GameDuelService.SignEq.Equal)hash ^= Compare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        output.WriteRawTag(8);
        output.WriteEnum((int)Type);
      }
      if (Val != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Val);
      }
      if (Compare != global::ULZAsset.ProtoMod.GameDuelService.SignEq.Equal) {
        output.WriteRawTag(24);
        output.WriteEnum((int)Compare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      if (Compare != global::ULZAsset.ProtoMod.GameDuelService.SignEq.Equal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Compare);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillCardCond other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::ULZAsset.ProtoMod.GameDuelService.EventCardType.Null) {
        Type = other.Type;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
      if (other.Compare != global::ULZAsset.ProtoMod.GameDuelService.SignEq.Equal) {
        Compare = other.Compare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Type = (global::ULZAsset.ProtoMod.GameDuelService.EventCardType)input.ReadEnum();
              break;
            }
          case 16:
            {
              Val = input.ReadInt32();
              break;
            }
          case 24:
            {
              Compare = (global::ULZAsset.ProtoMod.GameDuelService.SignEq)input.ReadEnum();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// sprite-display 
  /// </summary>
  public sealed partial class StatusSet : pb::IMessage<StatusSet> {
    private static readonly pb::MessageParser<StatusSet> _parser = new pb::MessageParser<StatusSet>(() => new StatusSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusSet(StatusSet other) : this() {
      id_ = other.id_;
      statusId_ = other.statusId_;
      remainCd_ = other.remainCd_;
      featNo_ = other.featNo_;
      pow_ = other.pow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusSet Clone() {
      return new StatusSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status_id" field.</summary>
    public const int StatusIdFieldNumber = 2;
    private string statusId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusId {
      get { return statusId_; }
      set {
        statusId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remain_cd" field.</summary>
    public const int RemainCdFieldNumber = 3;
    private int remainCd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainCd {
      get { return remainCd_; }
      set {
        remainCd_ = value;
      }
    }

    /// <summary>Field number for the "feat_no" field.</summary>
    public const int FeatNoFieldNumber = 4;
    private int featNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeatNo {
      get { return featNo_; }
      set {
        featNo_ = value;
      }
    }

    /// <summary>Field number for the "pow" field.</summary>
    public const int PowFieldNumber = 5;
    private int pow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pow {
      get { return pow_; }
      set {
        pow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id)return false;
      if (StatusId != other.StatusId)return false;
      if (RemainCd != other.RemainCd)return false;
      if (FeatNo != other.FeatNo)return false;
      if (Pow != other.Pow)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0)hash ^= Id.GetHashCode();
      if (StatusId.Length != 0)hash ^= StatusId.GetHashCode();
      if (RemainCd != 0)hash ^= RemainCd.GetHashCode();
      if (FeatNo != 0)hash ^= FeatNo.GetHashCode();
      if (Pow != 0)hash ^= Pow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StatusId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusId);
      }
      if (RemainCd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainCd);
      }
      if (FeatNo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FeatNo);
      }
      if (Pow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StatusId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusId);
      }
      if (RemainCd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainCd);
      }
      if (FeatNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeatNo);
      }
      if (Pow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusSet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.StatusId.Length != 0) {
        StatusId = other.StatusId;
      }
      if (other.RemainCd != 0) {
        RemainCd = other.RemainCd;
      }
      if (other.FeatNo != 0) {
        FeatNo = other.FeatNo;
      }
      if (other.Pow != 0) {
        Pow = other.Pow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Id = input.ReadInt32();
              break;
            }
          case 18:
            {
              StatusId = input.ReadString();
              break;
            }
          case 24:
            {
              RemainCd = input.ReadInt32();
              break;
            }
          case 32:
            {
              FeatNo = input.ReadInt32();
              break;
            }
          case 40:
            {
              Pow = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  public sealed partial class EffectResult : pb::IMessage<EffectResult> {
    private static readonly pb::MessageParser<EffectResult> _parser = new pb::MessageParser<EffectResult>(() => new EffectResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult(EffectResult other) : this() {
      tarCard_ = other.tarCard_;
      tarSide_ = other.tarSide_;
      triggerTime_ = other.triggerTime_ != null ? other.triggerTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      efOption_ = other.efOption_;
      hp_ = other.hp_;
      ap_ = other.ap_;
      dp_ = other.dp_;
      mp_ = other.mp_;
      disableMove_ = other.disableMove_;
      disableAtk_ = other.disableAtk_;
      disableDef_ = other.disableDef_;
      disableDraw_ = other.disableDraw_;
      disableChange_ = other.disableChange_;
      bindingFunc_ = other.bindingFunc_;
      remainCd_ = other.remainCd_;
      assignFrom_ = other.assignFrom_;
      skillId_ = other.skillId_;
      statusId_ = other.statusId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectResult Clone() {
      return new EffectResult(this);
    }

    /// <summary>Field number for the "tar_card" field.</summary>
    public const int TarCardFieldNumber = 1;
    private int tarCard_;
    /// <summary>
    /// targer 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TarCard {
      get { return tarCard_; }
      set {
        tarCard_ = value;
      }
    }

    /// <summary>Field number for the "tar_side" field.</summary>
    public const int TarSideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide tarSide_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide TarSide {
      get { return tarSide_; }
      set {
        tarSide_ = value;
      }
    }

    /// <summary>Field number for the "trigger_time" field.</summary>
    public const int TriggerTimeFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EffectTiming triggerTime_;
    /// <summary>
    /// trigger-time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EffectTiming TriggerTime {
      get { return triggerTime_; }
      set {
        triggerTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.EffectTiming endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EffectTiming EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "ef_option" field.</summary>
    public const int EfOptionFieldNumber = 5;
    private global::ULZAsset.ProtoMod.GameDuelService.EffectOption efOption_ = global::ULZAsset.ProtoMod.GameDuelService.EffectOption.StatusAddition;
    /// <summary>
    /// effect
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EffectOption EfOption {
      get { return efOption_; }
      set {
        efOption_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 6;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 7;
    private int ap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "dp" field.</summary>
    public const int DpFieldNumber = 8;
    private int dp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dp {
      get { return dp_; }
      set {
        dp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 9;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "disable_move" field.</summary>
    public const int DisableMoveFieldNumber = 10;
    private bool disableMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableMove {
      get { return disableMove_; }
      set {
        disableMove_ = value;
      }
    }

    /// <summary>Field number for the "disable_atk" field.</summary>
    public const int DisableAtkFieldNumber = 11;
    private bool disableAtk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableAtk {
      get { return disableAtk_; }
      set {
        disableAtk_ = value;
      }
    }

    /// <summary>Field number for the "disable_def" field.</summary>
    public const int DisableDefFieldNumber = 12;
    private bool disableDef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableDef {
      get { return disableDef_; }
      set {
        disableDef_ = value;
      }
    }

    /// <summary>Field number for the "disable_draw" field.</summary>
    public const int DisableDrawFieldNumber = 13;
    private bool disableDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableDraw {
      get { return disableDraw_; }
      set {
        disableDraw_ = value;
      }
    }

    /// <summary>Field number for the "disable_change" field.</summary>
    public const int DisableChangeFieldNumber = 14;
    private bool disableChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableChange {
      get { return disableChange_; }
      set {
        disableChange_ = value;
      }
    }

    /// <summary>Field number for the "binding_func" field.</summary>
    public const int BindingFuncFieldNumber = 15;
    private string bindingFunc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BindingFunc {
      get { return bindingFunc_; }
      set {
        bindingFunc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remain_cd" field.</summary>
    public const int RemainCdFieldNumber = 16;
    private int remainCd_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainCd {
      get { return remainCd_; }
      set {
        remainCd_ = value;
      }
    }

    /// <summary>Field number for the "assign_from" field.</summary>
    public const int AssignFromFieldNumber = 17;
    private string assignFrom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssignFrom {
      get { return assignFrom_; }
      set {
        assignFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 18;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "status_id" field.</summary>
    public const int StatusIdFieldNumber = 19;
    private int statusId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusId {
      get { return statusId_; }
      set {
        statusId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarCard != other.TarCard)return false;
      if (TarSide != other.TarSide)return false;
      if (!object.Equals(TriggerTime, other.TriggerTime))return false;
      if (!object.Equals(EndTime, other.EndTime))return false;
      if (EfOption != other.EfOption)return false;
      if (Hp != other.Hp)return false;
      if (Ap != other.Ap)return false;
      if (Dp != other.Dp)return false;
      if (Mp != other.Mp)return false;
      if (DisableMove != other.DisableMove)return false;
      if (DisableAtk != other.DisableAtk)return false;
      if (DisableDef != other.DisableDef)return false;
      if (DisableDraw != other.DisableDraw)return false;
      if (DisableChange != other.DisableChange)return false;
      if (BindingFunc != other.BindingFunc)return false;
      if (RemainCd != other.RemainCd)return false;
      if (AssignFrom != other.AssignFrom)return false;
      if (SkillId != other.SkillId)return false;
      if (StatusId != other.StatusId)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarCard != 0)hash ^= TarCard.GetHashCode();
      if (TarSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= TarSide.GetHashCode();
      if (triggerTime_ != null)hash ^= TriggerTime.GetHashCode();
      if (endTime_ != null)hash ^= EndTime.GetHashCode();
      if (EfOption != global::ULZAsset.ProtoMod.GameDuelService.EffectOption.StatusAddition)hash ^= EfOption.GetHashCode();
      if (Hp != 0)hash ^= Hp.GetHashCode();
      if (Ap != 0)hash ^= Ap.GetHashCode();
      if (Dp != 0)hash ^= Dp.GetHashCode();
      if (Mp != 0)hash ^= Mp.GetHashCode();
      if (DisableMove != false)hash ^= DisableMove.GetHashCode();
      if (DisableAtk != false)hash ^= DisableAtk.GetHashCode();
      if (DisableDef != false)hash ^= DisableDef.GetHashCode();
      if (DisableDraw != false)hash ^= DisableDraw.GetHashCode();
      if (DisableChange != false)hash ^= DisableChange.GetHashCode();
      if (BindingFunc.Length != 0)hash ^= BindingFunc.GetHashCode();
      if (RemainCd != 0)hash ^= RemainCd.GetHashCode();
      if (AssignFrom.Length != 0)hash ^= AssignFrom.GetHashCode();
      if (SkillId != 0)hash ^= SkillId.GetHashCode();
      if (StatusId != 0)hash ^= StatusId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarCard != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TarCard);
      }
      if (TarSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)TarSide);
      }
      if (triggerTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TriggerTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (EfOption != global::ULZAsset.ProtoMod.GameDuelService.EffectOption.StatusAddition) {
        output.WriteRawTag(40);
        output.WriteEnum((int)EfOption);
      }
      if (Hp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hp);
      }
      if (Ap != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Ap);
      }
      if (Dp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Dp);
      }
      if (Mp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Mp);
      }
      if (DisableMove != false) {
        output.WriteRawTag(80);
        output.WriteBool(DisableMove);
      }
      if (DisableAtk != false) {
        output.WriteRawTag(88);
        output.WriteBool(DisableAtk);
      }
      if (DisableDef != false) {
        output.WriteRawTag(96);
        output.WriteBool(DisableDef);
      }
      if (DisableDraw != false) {
        output.WriteRawTag(104);
        output.WriteBool(DisableDraw);
      }
      if (DisableChange != false) {
        output.WriteRawTag(112);
        output.WriteBool(DisableChange);
      }
      if (BindingFunc.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(BindingFunc);
      }
      if (RemainCd != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RemainCd);
      }
      if (AssignFrom.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AssignFrom);
      }
      if (SkillId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SkillId);
      }
      if (StatusId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(StatusId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TarCard);
      }
      if (TarSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)TarSide);
      }
      if (triggerTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriggerTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (EfOption != global::ULZAsset.ProtoMod.GameDuelService.EffectOption.StatusAddition) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EfOption);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ap);
      }
      if (Dp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (DisableMove != false) {
        size += 1 + 1;
      }
      if (DisableAtk != false) {
        size += 1 + 1;
      }
      if (DisableDef != false) {
        size += 1 + 1;
      }
      if (DisableDraw != false) {
        size += 1 + 1;
      }
      if (DisableChange != false) {
        size += 1 + 1;
      }
      if (BindingFunc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BindingFunc);
      }
      if (RemainCd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RemainCd);
      }
      if (AssignFrom.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssignFrom);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (StatusId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StatusId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectResult other) {
      if (other == null) {
        return;
      }
      if (other.TarCard != 0) {
        TarCard = other.TarCard;
      }
      if (other.TarSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        TarSide = other.TarSide;
      }
      if (other.triggerTime_ != null) {
        if (triggerTime_ == null) {
          TriggerTime = new global::ULZAsset.ProtoMod.GameDuelService.EffectTiming();
        }
        TriggerTime.MergeFrom(other.TriggerTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::ULZAsset.ProtoMod.GameDuelService.EffectTiming();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.EfOption != global::ULZAsset.ProtoMod.GameDuelService.EffectOption.StatusAddition) {
        EfOption = other.EfOption;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.Dp != 0) {
        Dp = other.Dp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.DisableMove != false) {
        DisableMove = other.DisableMove;
      }
      if (other.DisableAtk != false) {
        DisableAtk = other.DisableAtk;
      }
      if (other.DisableDef != false) {
        DisableDef = other.DisableDef;
      }
      if (other.DisableDraw != false) {
        DisableDraw = other.DisableDraw;
      }
      if (other.DisableChange != false) {
        DisableChange = other.DisableChange;
      }
      if (other.BindingFunc.Length != 0) {
        BindingFunc = other.BindingFunc;
      }
      if (other.RemainCd != 0) {
        RemainCd = other.RemainCd;
      }
      if (other.AssignFrom.Length != 0) {
        AssignFrom = other.AssignFrom;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.StatusId != 0) {
        StatusId = other.StatusId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              TarCard = input.ReadInt32();
              break;
            }
          case 16:
            {
              TarSide = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 26:
            {
              if (triggerTime_ == null) {
                TriggerTime = new global::ULZAsset.ProtoMod.GameDuelService.EffectTiming();
              }
              input.ReadMessage(TriggerTime);
              break;
            }
          case 34:
            {
              if (endTime_ == null) {
                EndTime = new global::ULZAsset.ProtoMod.GameDuelService.EffectTiming();
              }
              input.ReadMessage(EndTime);
              break;
            }
          case 40:
            {
              EfOption = (global::ULZAsset.ProtoMod.GameDuelService.EffectOption)input.ReadEnum();
              break;
            }
          case 48:
            {
              Hp = input.ReadInt32();
              break;
            }
          case 56:
            {
              Ap = input.ReadInt32();
              break;
            }
          case 64:
            {
              Dp = input.ReadInt32();
              break;
            }
          case 72:
            {
              Mp = input.ReadInt32();
              break;
            }
          case 80:
            {
              DisableMove = input.ReadBool();
              break;
            }
          case 88:
            {
              DisableAtk = input.ReadBool();
              break;
            }
          case 96:
            {
              DisableDef = input.ReadBool();
              break;
            }
          case 104:
            {
              DisableDraw = input.ReadBool();
              break;
            }
          case 112:
            {
              DisableChange = input.ReadBool();
              break;
            }
          case 122:
            {
              BindingFunc = input.ReadString();
              break;
            }
          case 128:
            {
              RemainCd = input.ReadInt32();
              break;
            }
          case 138:
            {
              AssignFrom = input.ReadString();
              break;
            }
          case 144:
            {
              SkillId = input.ReadInt32();
              break;
            }
          case 152:
            {
              StatusId = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  public sealed partial class EffectTiming : pb::IMessage<EffectTiming> {
    private static readonly pb::MessageParser<EffectTiming> _parser = new pb::MessageParser<EffectTiming>(() => new EffectTiming());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectTiming> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectTiming() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectTiming(EffectTiming other) : this() {
      eventPhase_ = other.eventPhase_;
      hookType_ = other.hookType_;
      subCount_ = other.subCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectTiming Clone() {
      return new EffectTiming(this);
    }

    /// <summary>Field number for the "event_phase" field.</summary>
    public const int EventPhaseFieldNumber = 1;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase eventPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase EventPhase {
      get { return eventPhase_; }
      set {
        eventPhase_ = value;
      }
    }

    /// <summary>Field number for the "hook_type" field.</summary>
    public const int HookTypeFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookType hookType_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookType HookType {
      get { return hookType_; }
      set {
        hookType_ = value;
      }
    }

    /// <summary>Field number for the "sub_count" field.</summary>
    public const int SubCountFieldNumber = 3;
    private int subCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubCount {
      get { return subCount_; }
      set {
        subCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectTiming);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectTiming other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventPhase != other.EventPhase)return false;
      if (HookType != other.HookType)return false;
      if (SubCount != other.SubCount)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= EventPhase.GetHashCode();
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant)hash ^= HookType.GetHashCode();
      if (SubCount != 0)hash ^= SubCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(8);
        output.WriteEnum((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        output.WriteRawTag(16);
        output.WriteEnum((int)HookType);
      }
      if (SubCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SubCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HookType);
      }
      if (SubCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectTiming other) {
      if (other == null) {
        return;
      }
      if (other.EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        EventPhase = other.EventPhase;
      }
      if (other.HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        HookType = other.HookType;
      }
      if (other.SubCount != 0) {
        SubCount = other.SubCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              EventPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 16:
            {
              HookType = (global::ULZAsset.ProtoMod.GameDuelService.EventHookType)input.ReadEnum();
              break;
            }
          case 24:
            {
              SubCount = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code