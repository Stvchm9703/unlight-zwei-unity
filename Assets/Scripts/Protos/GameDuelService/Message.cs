// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameDuelService/message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ULZAsset.ProtoMod.GameDuelService {

  /// <summary>Holder for reflection information generated from GameDuelService/message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for GameDuelService/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch1HYW1lRHVlbFNlcnZpY2UvbWVzc2FnZS5wcm90bxIIVUxaUHJvdG8aJEdh",
          "bWVEdWVsU2VydmljZS9FdmVudEhvb2tQaGFzZS5wcm90bxoaR2FtZUR1ZWxT",
          "ZXJ2aWNlL0RhdGEucHJvdG8iWgoLRUNTaG9ydEhhbmQSDwoHY2FyZF9pZBgB",
          "IAEoBRIoCghwb3NpdGlvbhgCIAEoDjIWLlVMWlByb3RvLkV2ZW50Q2FyZFBv",
          "cxIQCghpc0ludmVydBgDIAEoCCKGAgoLR0RDcmVhdGVSZXESEAoIcm9vbV9r",
          "ZXkYASABKAkSDwoHaG9zdF9pZBgCIAEoCRIRCglkdWVsZXJfaWQYAyABKAkS",
          "CwoDbnZuGAQgASgFEi0KDmhvc3RfY2FyZF9kZWNrGAUgAygLMhUuVUxaUHJv",
          "dG8uQ2hhckNhcmRTZXQSLQoOZHVlbF9jYXJkX2RlY2sYBiADKAsyFS5VTFpQ",
          "cm90by5DaGFyQ2FyZFNldBIqCg1ob3N0X2V4dHJhX2VjGAcgAygLMhMuVUxa",
          "UHJvdG8uRXZlbnRDYXJkEioKDWR1ZWxfZXh0cmFfZWMYCCADKAsyEy5VTFpQ",
          "cm90by5FdmVudENhcmQioQEKDEdER2V0SW5mb1JlcRIQCghyb29tX2tleRgB",
          "IAEoCRIiCgRzaWRlGAIgASgOMhQuVUxaUHJvdG8uUGxheWVyU2lkZRIvCg1j",
          "dXJyZW50X3BoYXNlGAMgASgOMhguVUxaUHJvdG8uRXZlbnRIb29rUGhhc2US",
          "EgoKaXNfd2F0Y2hlchgEIAEoCBIWCg5pbmNvbWVfdXNlcl9pZBgFIAEoCSKw",
          "AgoPR0RCcm9hZGNhc3RSZXNwEhAKCHJvb21fa2V5GAEgASgJEgsKA21zZxgC",
          "IAEoCRIiCgdjb21tYW5kGAMgASgOMhEuVUxaUHJvdG8uQ2FzdENtZBIvCg1j",
          "dXJyZW50X3BoYXNlGAQgASgOMhguVUxaUHJvdG8uRXZlbnRIb29rUGhhc2US",
          "KwoKcGhhc2VfaG9vaxgFIAEoDjIXLlVMWlByb3RvLkV2ZW50SG9va1R5cGUS",
          "IgoEc2lkZRgGIAEoDjIULlVMWlByb3RvLlBsYXllclNpZGUSKwoMaW5zdGFu",
          "Y2Vfc2V0GAcgAygLMhUuVUxaUHJvdG8uRUNTaG9ydEhhbmQSKwoLZWZmZWN0",
          "X3RyaWcYCCADKAsyFi5VTFpQcm90by5FZmZlY3RSZXN1bHQioQEKDEdESW5z",
          "dGFuY2VEVBIQCghyb29tX2tleRgBIAEoCRIiCgRzaWRlGAIgASgOMhQuVUxa",
          "UHJvdG8uUGxheWVyU2lkZRIvCg1jdXJyZW50X3BoYXNlGAMgASgOMhguVUxa",
          "UHJvdG8uRXZlbnRIb29rUGhhc2USKgoLdXBkYXRlX2NhcmQYBCADKAsyFS5V",
          "TFpQcm90by5FQ1Nob3J0SGFuZCLUAQoQR0RNb3ZlQ29uZmlybVJlcRIQCghy",
          "b29tX2tleRgBIAEoCRIiCgRzaWRlGAIgASgOMhQuVUxaUHJvdG8uUGxheWVy",
          "U2lkZRIoCgt1cGRhdGVfY2FyZBgDIAMoCzITLlVMWlByb3RvLkV2ZW50Q2Fy",
          "ZBIoCghtb3ZlX29wdBgEIAEoDjIWLlVMWlByb3RvLk1vdmVQaGFzZU9wdBIN",
          "CgVwb2ludBgFIAEoBRInCgt0cmlnZ2VyX3NrbBgGIAMoCzISLlVMWlByb3Rv",
          "LlNraWxsU2V0IqIBChFHRE1vdmVDb25maXJtUmVzcBIQCghyb29tX2tleRgB",
          "IAEoCRIpCgxyZXN1bHRfcmFuZ2UYAiABKA4yEy5VTFpQcm90by5SYW5nZVR5",
          "cGUSDwoHaG9zdF9ocBgDIAEoBRIPCgdkdWVsX2hwGAQgASgFEhYKDmhvc3Rf",
          "Y3Vycl9jYXJkGAUgASgFEhYKDmR1ZWxfY3Vycl9jYXJkGAYgASgFIsoBCg5H",
          "REFEQ29uZmlybVJlcRIQCghyb29tX2tleRgBIAEoCRIiCgRzaWRlGAIgASgO",
          "MhQuVUxaUHJvdG8uUGxheWVyU2lkZRIvCg1jdXJyZW50X3BoYXNlGAMgASgO",
          "MhguVUxaUHJvdG8uRXZlbnRIb29rUGhhc2USJwoLdHJpZ2dlcl9za2wYBCAD",
          "KAsyEi5VTFpQcm90by5Ta2lsbFNldBIoCgt1cGRhdGVfY2FyZBgFIAMoCzIT",
          "LlVMWlByb3RvLkV2ZW50Q2FyZCKGAQoOR0RBRFJlc3VsdFJlc3ASEAoIcm9v",
          "bV9rZXkYASABKAkSIgoEc2lkZRgCIAEoDjIULlVMWlByb3RvLlBsYXllclNp",
          "ZGUSLwoNY3VycmVudF9waGFzZRgDIAEoDjIYLlVMWlByb3RvLkV2ZW50SG9v",
          "a1BoYXNlEg0KBXBvaW50GAQgASgFIqwCCg5HREFERGljZVJlc3VsdBIQCghy",
          "b29tX2tleRgBIAEoCRINCgV0dXJucxgCIAEoBRIvCg1jdXJyZW50X3BoYXNl",
          "GAMgASgOMhguVUxaUHJvdG8uRXZlbnRIb29rUGhhc2USJgoIcGhhc2VfYWIY",
          "BCABKA4yFC5VTFpQcm90by5QbGF5ZXJTaWRlEiYKCGF0a19zaWRlGAUgASgO",
          "MhQuVUxaUHJvdG8uUGxheWVyU2lkZRIRCglhdGtfcG9pbnQYBiABKAUSFAoM",
          "YXRrX3NraWxsX2lkGAcgAygFEiYKCGRlZl9zaWRlGAggASgOMhQuVUxaUHJv",
          "dG8uUGxheWVyU2lkZRIRCglkZWZfcG9pbnQYCSABKAUSFAoMZGVmX3NraWxs",
          "X2lkGAogAygFIqcBChFHRFBoYXNlQ29uZmlybVJlcRIQCghyb29tX2tleRgB",
          "IAEoCRIiCgRzaWRlGAIgASgOMhQuVUxaUHJvdG8uUGxheWVyU2lkZRIvCg1j",
          "dXJyZW50X3BoYXNlGAMgASgOMhguVUxaUHJvdG8uRXZlbnRIb29rUGhhc2US",
          "KwoKcGhhc2VfaG9vaxgEIAEoDjIXLlVMWlByb3RvLkV2ZW50SG9va1R5cGUi",
          "JgoSR0RQaGFzZUNvbmZpcm1SZXNwEhAKCHJvb21fa2V5GAEgASgJIlwKEkdE",
          "Q2hhbmdlQ29uZmlybVJlcRIQCghyb29tX2tleRgBIAEoCRIiCgRzaWRlGAIg",
          "ASgOMhQuVUxaUHJvdG8uUGxheWVyU2lkZRIQCghjYXJkX251bRgDIAEoBSrq",
          "AQoHQ2FzdENtZBIVChFHRVRfRUZGRUNUX1JFU1VMVBAAEhkKFUdFVF9EUkFX",
          "X1BIQVNFX1JFU1VMVBABEhkKFUdFVF9NT1ZFX1BIQVNFX1JFU1VMVBACEhgK",
          "FEdFVF9BVEtfUEhBU0VfUkVTVUxUEAMSGAoUR0VUX0RFRl9QSEFTRV9SRVNV",
          "TFQQBBIVChFHRVRfSU5TVEFOQ0VfQ0FSRBAFEhYKEkdFVF9HQU1FU0VUX1JF",
          "U1VMVBAGEhMKD0lOU1RBTkNFX0RBTUFHRRAHEhoKFklOU1RBTkNFX1NUQVRV",
          "U19DSEFOR0UQCEItWgcuO3Byb3RvqgIhVUxaQXNzZXQuUHJvdG9Nb2QuR2Ft",
          "ZUR1ZWxTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ULZAsset.ProtoMod.GameDuelService.EventHookPhaseReflection.Descriptor, global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new [] { typeof(global::ULZAsset.ProtoMod.GameDuelService.CastCmd), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.ECShortHand), global::ULZAsset.ProtoMod.GameDuelService.ECShortHand.Parser, new [] { "CardId", "Position", "IsInvert" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq), global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq.Parser, new [] { "RoomKey", "HostId", "DuelerId", "Nvn", "HostCardDeck", "DuelCardDeck", "HostExtraEc", "DuelExtraEc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq), global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq.Parser, new [] { "RoomKey", "Side", "CurrentPhase", "IsWatcher", "IncomeUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp), global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp.Parser, new [] { "RoomKey", "Msg", "Command", "CurrentPhase", "PhaseHook", "Side", "InstanceSet", "EffectTrig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT), global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT.Parser, new [] { "RoomKey", "Side", "CurrentPhase", "UpdateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq), global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq.Parser, new [] { "RoomKey", "Side", "UpdateCard", "MoveOpt", "Point", "TriggerSkl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp), global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp.Parser, new [] { "RoomKey", "ResultRange", "HostHp", "DuelHp", "HostCurrCard", "DuelCurrCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq), global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq.Parser, new [] { "RoomKey", "Side", "CurrentPhase", "TriggerSkl", "UpdateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp), global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp.Parser, new [] { "RoomKey", "Side", "CurrentPhase", "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult), global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult.Parser, new [] { "RoomKey", "Turns", "CurrentPhase", "PhaseAb", "AtkSide", "AtkPoint", "AtkSkillId", "DefSide", "DefPoint", "DefSkillId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq), global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq.Parser, new [] { "RoomKey", "Side", "CurrentPhase", "PhaseHook" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp), global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp.Parser, new [] { "RoomKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq), global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq.Parser, new [] { "RoomKey", "Side", "CardNum" }, null, null, null)
        }));
    }
    #endregion

  }
  #region Enums
  public enum CastCmd {
    [pbr::OriginalName("GET_EFFECT_RESULT")] GetEffectResult = 0, [pbr::OriginalName("GET_DRAW_PHASE_RESULT")] GetDrawPhaseResult = 1, [pbr::OriginalName("GET_MOVE_PHASE_RESULT")] GetMovePhaseResult = 2, [pbr::OriginalName("GET_ATK_PHASE_RESULT")] GetAtkPhaseResult = 3, [pbr::OriginalName("GET_DEF_PHASE_RESULT")] GetDefPhaseResult = 4, [pbr::OriginalName("GET_INSTANCE_CARD")] GetInstanceCard = 5, [pbr::OriginalName("GET_GAMESET_RESULT")] GetGamesetResult = 6, [pbr::OriginalName("INSTANCE_DAMAGE")] InstanceDamage = 7, [pbr::OriginalName("INSTANCE_STATUS_CHANGE")] InstanceStatusChange = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Sub-helper-struct
  /// -------------------------------------------------------------
  /// </summary>
  public sealed partial class ECShortHand : pb::IMessage<ECShortHand> {
    private static readonly pb::MessageParser<ECShortHand> _parser = new pb::MessageParser<ECShortHand>(() => new ECShortHand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ECShortHand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ECShortHand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ECShortHand(ECShortHand other) : this() {
      cardId_ = other.cardId_;
      position_ = other.position_;
      isInvert_ = other.isInvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ECShortHand Clone() {
      return new ECShortHand(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.EventCardPos position_ = global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventCardPos Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "isInvert" field.</summary>
    public const int IsInvertFieldNumber = 3;
    private bool isInvert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvert {
      get { return isInvert_; }
      set {
        isInvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ECShortHand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ECShortHand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId)return false;
      if (Position != other.Position)return false;
      if (IsInvert != other.IsInvert)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0)hash ^= CardId.GetHashCode();
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block)hash ^= Position.GetHashCode();
      if (IsInvert != false)hash ^= IsInvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Position);
      }
      if (IsInvert != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Position);
      }
      if (IsInvert != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ECShortHand other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Position != global::ULZAsset.ProtoMod.GameDuelService.EventCardPos.Block) {
        Position = other.Position;
      }
      if (other.IsInvert != false) {
        IsInvert = other.IsInvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              CardId = input.ReadInt32();
              break;
            }
          case 16:
            {
              Position = (global::ULZAsset.ProtoMod.GameDuelService.EventCardPos)input.ReadEnum();
              break;
            }
          case 24:
            {
              IsInvert = input.ReadBool();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// Create-Game Request
  /// </summary>
  public sealed partial class GDCreateReq : pb::IMessage<GDCreateReq> {
    private static readonly pb::MessageParser<GDCreateReq> _parser = new pb::MessageParser<GDCreateReq>(() => new GDCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDCreateReq(GDCreateReq other) : this() {
      roomKey_ = other.roomKey_;
      hostId_ = other.hostId_;
      duelerId_ = other.duelerId_;
      nvn_ = other.nvn_;
      hostCardDeck_ = other.hostCardDeck_.Clone();
      duelCardDeck_ = other.duelCardDeck_.Clone();
      hostExtraEc_ = other.hostExtraEc_.Clone();
      duelExtraEc_ = other.duelExtraEc_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDCreateReq Clone() {
      return new GDCreateReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_id" field.</summary>
    public const int HostIdFieldNumber = 2;
    private string hostId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostId {
      get { return hostId_; }
      set {
        hostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dueler_id" field.</summary>
    public const int DuelerIdFieldNumber = 3;
    private string duelerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DuelerId {
      get { return duelerId_; }
      set {
        duelerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nvn" field.</summary>
    public const int NvnFieldNumber = 4;
    private int nvn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nvn {
      get { return nvn_; }
      set {
        nvn_ = value;
      }
    }

    /// <summary>Field number for the "host_card_deck" field.</summary>
    public const int HostCardDeckFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> _repeated_hostCardDeck_codec = pb::FieldCodec.ForMessage(42, global::ULZAsset.ProtoMod.GameDuelService.CharCardSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> hostCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> HostCardDeck {
      get { return hostCardDeck_; }
    }

    /// <summary>Field number for the "duel_card_deck" field.</summary>
    public const int DuelCardDeckFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> _repeated_duelCardDeck_codec = pb::FieldCodec.ForMessage(50, global::ULZAsset.ProtoMod.GameDuelService.CharCardSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> duelCardDeck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.CharCardSet> DuelCardDeck {
      get { return duelCardDeck_; }
    }

    /// <summary>Field number for the "host_extra_ec" field.</summary>
    public const int HostExtraEcFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_hostExtraEc_codec = pb::FieldCodec.ForMessage(58, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> hostExtraEc_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> HostExtraEc {
      get { return hostExtraEc_; }
    }

    /// <summary>Field number for the "duel_extra_ec" field.</summary>
    public const int DuelExtraEcFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_duelExtraEc_codec = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> duelExtraEc_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> DuelExtraEc {
      get { return duelExtraEc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (HostId != other.HostId)return false;
      if (DuelerId != other.DuelerId)return false;
      if (Nvn != other.Nvn)return false;
      if (!hostCardDeck_.Equals(other.hostCardDeck_))return false;
      if (!duelCardDeck_.Equals(other.duelCardDeck_))return false;
      if (!hostExtraEc_.Equals(other.hostExtraEc_))return false;
      if (!duelExtraEc_.Equals(other.duelExtraEc_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (HostId.Length != 0)hash ^= HostId.GetHashCode();
      if (DuelerId.Length != 0)hash ^= DuelerId.GetHashCode();
      if (Nvn != 0)hash ^= Nvn.GetHashCode();
      hash ^= hostCardDeck_.GetHashCode();
      hash ^= duelCardDeck_.GetHashCode();
      hash ^= hostExtraEc_.GetHashCode();
      hash ^= duelExtraEc_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (HostId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostId);
      }
      if (DuelerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DuelerId);
      }
      if (Nvn != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Nvn);
      }
      hostCardDeck_.WriteTo(output, _repeated_hostCardDeck_codec);
      duelCardDeck_.WriteTo(output, _repeated_duelCardDeck_codec);
      hostExtraEc_.WriteTo(output, _repeated_hostExtraEc_codec);
      duelExtraEc_.WriteTo(output, _repeated_duelExtraEc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (HostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostId);
      }
      if (DuelerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DuelerId);
      }
      if (Nvn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nvn);
      }
      size += hostCardDeck_.CalculateSize(_repeated_hostCardDeck_codec);
      size += duelCardDeck_.CalculateSize(_repeated_duelCardDeck_codec);
      size += hostExtraEc_.CalculateSize(_repeated_hostExtraEc_codec);
      size += duelExtraEc_.CalculateSize(_repeated_duelExtraEc_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.HostId.Length != 0) {
        HostId = other.HostId;
      }
      if (other.DuelerId.Length != 0) {
        DuelerId = other.DuelerId;
      }
      if (other.Nvn != 0) {
        Nvn = other.Nvn;
      }
      hostCardDeck_.Add(other.hostCardDeck_);
      duelCardDeck_.Add(other.duelCardDeck_);
      hostExtraEc_.Add(other.hostExtraEc_);
      duelExtraEc_.Add(other.duelExtraEc_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 18:
            {
              HostId = input.ReadString();
              break;
            }
          case 26:
            {
              DuelerId = input.ReadString();
              break;
            }
          case 32:
            {
              Nvn = input.ReadInt32();
              break;
            }
          case 42:
            {
              hostCardDeck_.AddEntriesFrom(input, _repeated_hostCardDeck_codec);
              break;
            }
          case 50:
            {
              duelCardDeck_.AddEntriesFrom(input, _repeated_duelCardDeck_codec);
              break;
            }
          case 58:
            {
              hostExtraEc_.AddEntriesFrom(input, _repeated_hostExtraEc_codec);
              break;
            }
          case 66:
            {
              duelExtraEc_.AddEntriesFrom(input, _repeated_duelExtraEc_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// Get-Game Request
  ///  **general-struct
  /// </summary>
  public sealed partial class GDGetInfoReq : pb::IMessage<GDGetInfoReq> {
    private static readonly pb::MessageParser<GDGetInfoReq> _parser = new pb::MessageParser<GDGetInfoReq>(() => new GDGetInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDGetInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDGetInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDGetInfoReq(GDGetInfoReq other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      currentPhase_ = other.currentPhase_;
      isWatcher_ = other.isWatcher_;
      incomeUserId_ = other.incomeUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDGetInfoReq Clone() {
      return new GDGetInfoReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "is_watcher" field.</summary>
    public const int IsWatcherFieldNumber = 4;
    private bool isWatcher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWatcher {
      get { return isWatcher_; }
      set {
        isWatcher_ = value;
      }
    }

    /// <summary>Field number for the "income_user_id" field.</summary>
    public const int IncomeUserIdFieldNumber = 5;
    private string incomeUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IncomeUserId {
      get { return incomeUserId_; }
      set {
        incomeUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDGetInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDGetInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (IsWatcher != other.IsWatcher)return false;
      if (IncomeUserId != other.IncomeUserId)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      if (IsWatcher != false)hash ^= IsWatcher.GetHashCode();
      if (IncomeUserId.Length != 0)hash ^= IncomeUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      if (IsWatcher != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWatcher);
      }
      if (IncomeUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IncomeUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      if (IsWatcher != false) {
        size += 1 + 1;
      }
      if (IncomeUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IncomeUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDGetInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      if (other.IsWatcher != false) {
        IsWatcher = other.IsWatcher;
      }
      if (other.IncomeUserId.Length != 0) {
        IncomeUserId = other.IncomeUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 32:
            {
              IsWatcher = input.ReadBool();
              break;
            }
          case 42:
            {
              IncomeUserId = input.ReadString();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// Server-Broadcast-Response
  /// </summary>
  public sealed partial class GDBroadcastResp : pb::IMessage<GDBroadcastResp> {
    private static readonly pb::MessageParser<GDBroadcastResp> _parser = new pb::MessageParser<GDBroadcastResp>(() => new GDBroadcastResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDBroadcastResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDBroadcastResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDBroadcastResp(GDBroadcastResp other) : this() {
      roomKey_ = other.roomKey_;
      msg_ = other.msg_;
      command_ = other.command_;
      currentPhase_ = other.currentPhase_;
      phaseHook_ = other.phaseHook_;
      side_ = other.side_;
      instanceSet_ = other.instanceSet_.Clone();
      effectTrig_ = other.effectTrig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDBroadcastResp Clone() {
      return new GDBroadcastResp(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.CastCmd command_ = global::ULZAsset.ProtoMod.GameDuelService.CastCmd.GetEffectResult;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.CastCmd Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "phase_hook" field.</summary>
    public const int PhaseHookFieldNumber = 5;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookType phaseHook_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookType PhaseHook {
      get { return phaseHook_; }
      set {
        phaseHook_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 6;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "instance_set" field.</summary>
    public const int InstanceSetFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> _repeated_instanceSet_codec = pb::FieldCodec.ForMessage(58, global::ULZAsset.ProtoMod.GameDuelService.ECShortHand.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> instanceSet_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> InstanceSet {
      get { return instanceSet_; }
    }

    /// <summary>Field number for the "effect_trig" field.</summary>
    public const int EffectTrigFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> _repeated_effectTrig_codec = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.GameDuelService.EffectResult.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> effectTrig_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> EffectTrig {
      get { return effectTrig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDBroadcastResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDBroadcastResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Msg != other.Msg)return false;
      if (Command != other.Command)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (PhaseHook != other.PhaseHook)return false;
      if (Side != other.Side)return false;
      if (!instanceSet_.Equals(other.instanceSet_))return false;
      if (!effectTrig_.Equals(other.effectTrig_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Msg.Length != 0)hash ^= Msg.GetHashCode();
      if (Command != global::ULZAsset.ProtoMod.GameDuelService.CastCmd.GetEffectResult)hash ^= Command.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant)hash ^= PhaseHook.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      hash ^= instanceSet_.GetHashCode();
      hash ^= effectTrig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (Command != global::ULZAsset.ProtoMod.GameDuelService.CastCmd.GetEffectResult) {
        output.WriteRawTag(24);
        output.WriteEnum((int)Command);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(32);
        output.WriteEnum((int)CurrentPhase);
      }
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        output.WriteRawTag(40);
        output.WriteEnum((int)PhaseHook);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(48);
        output.WriteEnum((int)Side);
      }
      instanceSet_.WriteTo(output, _repeated_instanceSet_codec);
      effectTrig_.WriteTo(output, _repeated_effectTrig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (Command != global::ULZAsset.ProtoMod.GameDuelService.CastCmd.GetEffectResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Command);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseHook);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      size += instanceSet_.CalculateSize(_repeated_instanceSet_codec);
      size += effectTrig_.CalculateSize(_repeated_effectTrig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDBroadcastResp other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Command != global::ULZAsset.ProtoMod.GameDuelService.CastCmd.GetEffectResult) {
        Command = other.Command;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      if (other.PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        PhaseHook = other.PhaseHook;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      instanceSet_.Add(other.instanceSet_);
      effectTrig_.Add(other.effectTrig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 18:
            {
              Msg = input.ReadString();
              break;
            }
          case 24:
            {
              Command = (global::ULZAsset.ProtoMod.GameDuelService.CastCmd)input.ReadEnum();
              break;
            }
          case 32:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 40:
            {
              PhaseHook = (global::ULZAsset.ProtoMod.GameDuelService.EventHookType)input.ReadEnum();
              break;
            }
          case 48:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 58:
            {
              instanceSet_.AddEntriesFrom(input, _repeated_instanceSet_codec);
              break;
            }
          case 66:
            {
              effectTrig_.AddEntriesFrom(input, _repeated_effectTrig_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// instance-set-event-card
  /// </summary>
  public sealed partial class GDInstanceDT : pb::IMessage<GDInstanceDT> {
    private static readonly pb::MessageParser<GDInstanceDT> _parser = new pb::MessageParser<GDInstanceDT>(() => new GDInstanceDT());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDInstanceDT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDInstanceDT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDInstanceDT(GDInstanceDT other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      currentPhase_ = other.currentPhase_;
      updateCard_ = other.updateCard_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDInstanceDT Clone() {
      return new GDInstanceDT(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "update_card" field.</summary>
    public const int UpdateCardFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> _repeated_updateCard_codec = pb::FieldCodec.ForMessage(34, global::ULZAsset.ProtoMod.GameDuelService.ECShortHand.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> updateCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.ECShortHand> UpdateCard {
      get { return updateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDInstanceDT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDInstanceDT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (!updateCard_.Equals(other.updateCard_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      hash ^= updateCard_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      updateCard_.WriteTo(output, _repeated_updateCard_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      size += updateCard_.CalculateSize(_repeated_updateCard_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDInstanceDT other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      updateCard_.Add(other.updateCard_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 34:
            {
              updateCard_.AddEntriesFrom(input, _repeated_updateCard_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// Move-Phase-Confirm Request
  /// </summary>
  public sealed partial class GDMoveConfirmReq : pb::IMessage<GDMoveConfirmReq> {
    private static readonly pb::MessageParser<GDMoveConfirmReq> _parser = new pb::MessageParser<GDMoveConfirmReq>(() => new GDMoveConfirmReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDMoveConfirmReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmReq(GDMoveConfirmReq other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      updateCard_ = other.updateCard_.Clone();
      moveOpt_ = other.moveOpt_;
      point_ = other.point_;
      triggerSkl_ = other.triggerSkl_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmReq Clone() {
      return new GDMoveConfirmReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "update_card" field.</summary>
    public const int UpdateCardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_updateCard_codec = pb::FieldCodec.ForMessage(26, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> updateCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> UpdateCard {
      get { return updateCard_; }
    }

    /// <summary>Field number for the "move_opt" field.</summary>
    public const int MoveOptFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt moveOpt_ = global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt MoveOpt {
      get { return moveOpt_; }
      set {
        moveOpt_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 5;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "trigger_skl" field.</summary>
    public const int TriggerSklFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_triggerSkl_codec = pb::FieldCodec.ForMessage(50, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> triggerSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> TriggerSkl {
      get { return triggerSkl_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDMoveConfirmReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDMoveConfirmReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (!updateCard_.Equals(other.updateCard_))return false;
      if (MoveOpt != other.MoveOpt)return false;
      if (Point != other.Point)return false;
      if (!triggerSkl_.Equals(other.triggerSkl_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      hash ^= updateCard_.GetHashCode();
      if (MoveOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove)hash ^= MoveOpt.GetHashCode();
      if (Point != 0)hash ^= Point.GetHashCode();
      hash ^= triggerSkl_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      updateCard_.WriteTo(output, _repeated_updateCard_codec);
      if (MoveOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        output.WriteRawTag(32);
        output.WriteEnum((int)MoveOpt);
      }
      if (Point != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Point);
      }
      triggerSkl_.WriteTo(output, _repeated_triggerSkl_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      size += updateCard_.CalculateSize(_repeated_updateCard_codec);
      if (MoveOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MoveOpt);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      size += triggerSkl_.CalculateSize(_repeated_triggerSkl_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDMoveConfirmReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      updateCard_.Add(other.updateCard_);
      if (other.MoveOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        MoveOpt = other.MoveOpt;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      triggerSkl_.Add(other.triggerSkl_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 26:
            {
              updateCard_.AddEntriesFrom(input, _repeated_updateCard_codec);
              break;
            }
          case 32:
            {
              MoveOpt = (global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt)input.ReadEnum();
              break;
            }
          case 40:
            {
              Point = input.ReadInt32();
              break;
            }
          case 50:
            {
              triggerSkl_.AddEntriesFrom(input, _repeated_triggerSkl_codec);
              break;
            }
        }
      }
    }

  }

  public sealed partial class GDMoveConfirmResp : pb::IMessage<GDMoveConfirmResp> {
    private static readonly pb::MessageParser<GDMoveConfirmResp> _parser = new pb::MessageParser<GDMoveConfirmResp>(() => new GDMoveConfirmResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDMoveConfirmResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmResp(GDMoveConfirmResp other) : this() {
      roomKey_ = other.roomKey_;
      resultRange_ = other.resultRange_;
      hostHp_ = other.hostHp_;
      duelHp_ = other.duelHp_;
      hostCurrCard_ = other.hostCurrCard_;
      duelCurrCard_ = other.duelCurrCard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDMoveConfirmResp Clone() {
      return new GDMoveConfirmResp(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_range" field.</summary>
    public const int ResultRangeFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.RangeType resultRange_ = global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.RangeType ResultRange {
      get { return resultRange_; }
      set {
        resultRange_ = value;
      }
    }

    /// <summary>Field number for the "host_hp" field.</summary>
    public const int HostHpFieldNumber = 3;
    private int hostHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HostHp {
      get { return hostHp_; }
      set {
        hostHp_ = value;
      }
    }

    /// <summary>Field number for the "duel_hp" field.</summary>
    public const int DuelHpFieldNumber = 4;
    private int duelHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DuelHp {
      get { return duelHp_; }
      set {
        duelHp_ = value;
      }
    }

    /// <summary>Field number for the "host_curr_card" field.</summary>
    public const int HostCurrCardFieldNumber = 5;
    private int hostCurrCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HostCurrCard {
      get { return hostCurrCard_; }
      set {
        hostCurrCard_ = value;
      }
    }

    /// <summary>Field number for the "duel_curr_card" field.</summary>
    public const int DuelCurrCardFieldNumber = 6;
    private int duelCurrCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DuelCurrCard {
      get { return duelCurrCard_; }
      set {
        duelCurrCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDMoveConfirmResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDMoveConfirmResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (ResultRange != other.ResultRange)return false;
      if (HostHp != other.HostHp)return false;
      if (DuelHp != other.DuelHp)return false;
      if (HostCurrCard != other.HostCurrCard)return false;
      if (DuelCurrCard != other.DuelCurrCard)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (ResultRange != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short)hash ^= ResultRange.GetHashCode();
      if (HostHp != 0)hash ^= HostHp.GetHashCode();
      if (DuelHp != 0)hash ^= DuelHp.GetHashCode();
      if (HostCurrCard != 0)hash ^= HostCurrCard.GetHashCode();
      if (DuelCurrCard != 0)hash ^= DuelCurrCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (ResultRange != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        output.WriteRawTag(16);
        output.WriteEnum((int)ResultRange);
      }
      if (HostHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HostHp);
      }
      if (DuelHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DuelHp);
      }
      if (HostCurrCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HostCurrCard);
      }
      if (DuelCurrCard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DuelCurrCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (ResultRange != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResultRange);
      }
      if (HostHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostHp);
      }
      if (DuelHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuelHp);
      }
      if (HostCurrCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostCurrCard);
      }
      if (DuelCurrCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuelCurrCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDMoveConfirmResp other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.ResultRange != global::ULZAsset.ProtoMod.GameDuelService.RangeType.Short) {
        ResultRange = other.ResultRange;
      }
      if (other.HostHp != 0) {
        HostHp = other.HostHp;
      }
      if (other.DuelHp != 0) {
        DuelHp = other.DuelHp;
      }
      if (other.HostCurrCard != 0) {
        HostCurrCard = other.HostCurrCard;
      }
      if (other.DuelCurrCard != 0) {
        DuelCurrCard = other.DuelCurrCard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              ResultRange = (global::ULZAsset.ProtoMod.GameDuelService.RangeType)input.ReadEnum();
              break;
            }
          case 24:
            {
              HostHp = input.ReadInt32();
              break;
            }
          case 32:
            {
              DuelHp = input.ReadInt32();
              break;
            }
          case 40:
            {
              HostCurrCard = input.ReadInt32();
              break;
            }
          case 48:
            {
              DuelCurrCard = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// ATK/DEF-Phase-Confirm Request
  ///      Player send data
  /// </summary>
  public sealed partial class GDADConfirmReq : pb::IMessage<GDADConfirmReq> {
    private static readonly pb::MessageParser<GDADConfirmReq> _parser = new pb::MessageParser<GDADConfirmReq>(() => new GDADConfirmReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDADConfirmReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADConfirmReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADConfirmReq(GDADConfirmReq other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      currentPhase_ = other.currentPhase_;
      triggerSkl_ = other.triggerSkl_.Clone();
      updateCard_ = other.updateCard_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADConfirmReq Clone() {
      return new GDADConfirmReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "trigger_skl" field.</summary>
    public const int TriggerSklFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_triggerSkl_codec = pb::FieldCodec.ForMessage(34, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> triggerSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> TriggerSkl {
      get { return triggerSkl_; }
    }

    /// <summary>Field number for the "update_card" field.</summary>
    public const int UpdateCardFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_updateCard_codec = pb::FieldCodec.ForMessage(42, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> updateCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    /// <summary>
    /// update-card : target event-card to used
    /// !NOTE: suppose the card data is stored during card-move 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> UpdateCard {
      get { return updateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDADConfirmReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDADConfirmReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (!triggerSkl_.Equals(other.triggerSkl_))return false;
      if (!updateCard_.Equals(other.updateCard_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      hash ^= triggerSkl_.GetHashCode();
      hash ^= updateCard_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      triggerSkl_.WriteTo(output, _repeated_triggerSkl_codec);
      updateCard_.WriteTo(output, _repeated_updateCard_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      size += triggerSkl_.CalculateSize(_repeated_triggerSkl_codec);
      size += updateCard_.CalculateSize(_repeated_updateCard_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDADConfirmReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      triggerSkl_.Add(other.triggerSkl_);
      updateCard_.Add(other.updateCard_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 34:
            {
              triggerSkl_.AddEntriesFrom(input, _repeated_triggerSkl_codec);
              break;
            }
          case 42:
            {
              updateCard_.AddEntriesFrom(input, _repeated_updateCard_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// ATK/DEF-Phase-Result Response
  /// </summary>
  public sealed partial class GDADResultResp : pb::IMessage<GDADResultResp> {
    private static readonly pb::MessageParser<GDADResultResp> _parser = new pb::MessageParser<GDADResultResp>(() => new GDADResultResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDADResultResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADResultResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADResultResp(GDADResultResp other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      currentPhase_ = other.currentPhase_;
      point_ = other.point_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADResultResp Clone() {
      return new GDADResultResp(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 4;
    private int point_;
    /// <summary>
    /// total Atk / Def Point after feat-func 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDADResultResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDADResultResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (Point != other.Point)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      if (Point != 0)hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      if (Point != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDADResultResp other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 32:
            {
              Point = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// ATK/DEF-Phase-DiceSet Response
  /// </summary>
  public sealed partial class GDADDiceResult : pb::IMessage<GDADDiceResult> {
    private static readonly pb::MessageParser<GDADDiceResult> _parser = new pb::MessageParser<GDADDiceResult>(() => new GDADDiceResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDADDiceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADDiceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADDiceResult(GDADDiceResult other) : this() {
      roomKey_ = other.roomKey_;
      turns_ = other.turns_;
      currentPhase_ = other.currentPhase_;
      phaseAb_ = other.phaseAb_;
      atkSide_ = other.atkSide_;
      atkPoint_ = other.atkPoint_;
      atkSkillId_ = other.atkSkillId_.Clone();
      defSide_ = other.defSide_;
      defPoint_ = other.defPoint_;
      defSkillId_ = other.defSkillId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDADDiceResult Clone() {
      return new GDADDiceResult(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 2;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "phase_ab" field.</summary>
    public const int PhaseAbFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide phaseAb_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide PhaseAb {
      get { return phaseAb_; }
      set {
        phaseAb_ = value;
      }
    }

    /// <summary>Field number for the "atk_side" field.</summary>
    public const int AtkSideFieldNumber = 5;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide atkSide_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide AtkSide {
      get { return atkSide_; }
      set {
        atkSide_ = value;
      }
    }

    /// <summary>Field number for the "atk_point" field.</summary>
    public const int AtkPointFieldNumber = 6;
    private int atkPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkPoint {
      get { return atkPoint_; }
      set {
        atkPoint_ = value;
      }
    }

    /// <summary>Field number for the "atk_skill_id" field.</summary>
    public const int AtkSkillIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_atkSkillId_codec = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> atkSkillId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AtkSkillId {
      get { return atkSkillId_; }
    }

    /// <summary>Field number for the "def_side" field.</summary>
    public const int DefSideFieldNumber = 8;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide defSide_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide DefSide {
      get { return defSide_; }
      set {
        defSide_ = value;
      }
    }

    /// <summary>Field number for the "def_point" field.</summary>
    public const int DefPointFieldNumber = 9;
    private int defPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefPoint {
      get { return defPoint_; }
      set {
        defPoint_ = value;
      }
    }

    /// <summary>Field number for the "def_skill_id" field.</summary>
    public const int DefSkillIdFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_defSkillId_codec = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> defSkillId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DefSkillId {
      get { return defSkillId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDADDiceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDADDiceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Turns != other.Turns)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (PhaseAb != other.PhaseAb)return false;
      if (AtkSide != other.AtkSide)return false;
      if (AtkPoint != other.AtkPoint)return false;
      if (!atkSkillId_.Equals(other.atkSkillId_))return false;
      if (DefSide != other.DefSide)return false;
      if (DefPoint != other.DefPoint)return false;
      if (!defSkillId_.Equals(other.defSkillId_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Turns != 0)hash ^= Turns.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      if (PhaseAb != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= PhaseAb.GetHashCode();
      if (AtkSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= AtkSide.GetHashCode();
      if (AtkPoint != 0)hash ^= AtkPoint.GetHashCode();
      hash ^= atkSkillId_.GetHashCode();
      if (DefSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= DefSide.GetHashCode();
      if (DefPoint != 0)hash ^= DefPoint.GetHashCode();
      hash ^= defSkillId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Turns != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Turns);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      if (PhaseAb != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(32);
        output.WriteEnum((int)PhaseAb);
      }
      if (AtkSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(40);
        output.WriteEnum((int)AtkSide);
      }
      if (AtkPoint != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AtkPoint);
      }
      atkSkillId_.WriteTo(output, _repeated_atkSkillId_codec);
      if (DefSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(64);
        output.WriteEnum((int)DefSide);
      }
      if (DefPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DefPoint);
      }
      defSkillId_.WriteTo(output, _repeated_defSkillId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      if (PhaseAb != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseAb);
      }
      if (AtkSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AtkSide);
      }
      if (AtkPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkPoint);
      }
      size += atkSkillId_.CalculateSize(_repeated_atkSkillId_codec);
      if (DefSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DefSide);
      }
      if (DefPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefPoint);
      }
      size += defSkillId_.CalculateSize(_repeated_defSkillId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDADDiceResult other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      if (other.PhaseAb != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        PhaseAb = other.PhaseAb;
      }
      if (other.AtkSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        AtkSide = other.AtkSide;
      }
      if (other.AtkPoint != 0) {
        AtkPoint = other.AtkPoint;
      }
      atkSkillId_.Add(other.atkSkillId_);
      if (other.DefSide != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        DefSide = other.DefSide;
      }
      if (other.DefPoint != 0) {
        DefPoint = other.DefPoint;
      }
      defSkillId_.Add(other.defSkillId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 32:
            {
              PhaseAb = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 40:
            {
              AtkSide = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 48:
            {
              AtkPoint = input.ReadInt32();
              break;
            }
          case 58:
              case 56:
            {
              atkSkillId_.AddEntriesFrom(input, _repeated_atkSkillId_codec);
              break;
            }
          case 64:
            {
              DefSide = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 72:
            {
              DefPoint = input.ReadInt32();
              break;
            }
          case 82:
              case 80:
            {
              defSkillId_.AddEntriesFrom(input, _repeated_defSkillId_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// 
  /// </summary>
  public sealed partial class GDPhaseConfirmReq : pb::IMessage<GDPhaseConfirmReq> {
    private static readonly pb::MessageParser<GDPhaseConfirmReq> _parser = new pb::MessageParser<GDPhaseConfirmReq>(() => new GDPhaseConfirmReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDPhaseConfirmReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmReq(GDPhaseConfirmReq other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      currentPhase_ = other.currentPhase_;
      phaseHook_ = other.phaseHook_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmReq Clone() {
      return new GDPhaseConfirmReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "current_phase" field.</summary>
    public const int CurrentPhaseFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase currentPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase CurrentPhase {
      get { return currentPhase_; }
      set {
        currentPhase_ = value;
      }
    }

    /// <summary>Field number for the "phase_hook" field.</summary>
    public const int PhaseHookFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookType phaseHook_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookType PhaseHook {
      get { return phaseHook_; }
      set {
        phaseHook_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDPhaseConfirmReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDPhaseConfirmReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CurrentPhase != other.CurrentPhase)return false;
      if (PhaseHook != other.PhaseHook)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= CurrentPhase.GetHashCode();
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant)hash ^= PhaseHook.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrentPhase);
      }
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        output.WriteRawTag(32);
        output.WriteEnum((int)PhaseHook);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrentPhase);
      }
      if (PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PhaseHook);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDPhaseConfirmReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CurrentPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        CurrentPhase = other.CurrentPhase;
      }
      if (other.PhaseHook != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        PhaseHook = other.PhaseHook;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrentPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 32:
            {
              PhaseHook = (global::ULZAsset.ProtoMod.GameDuelService.EventHookType)input.ReadEnum();
              break;
            }
        }
      }
    }

  }

  public sealed partial class GDPhaseConfirmResp : pb::IMessage<GDPhaseConfirmResp> {
    private static readonly pb::MessageParser<GDPhaseConfirmResp> _parser = new pb::MessageParser<GDPhaseConfirmResp>(() => new GDPhaseConfirmResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDPhaseConfirmResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmResp(GDPhaseConfirmResp other) : this() {
      roomKey_ = other.roomKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDPhaseConfirmResp Clone() {
      return new GDPhaseConfirmResp(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    /// <summary>
    /// repeated PhaseEffect
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDPhaseConfirmResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDPhaseConfirmResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDPhaseConfirmResp other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// -------------------------------------------------------------
  /// 
  /// </summary>
  public sealed partial class GDChangeConfirmReq : pb::IMessage<GDChangeConfirmReq> {
    private static readonly pb::MessageParser<GDChangeConfirmReq> _parser = new pb::MessageParser<GDChangeConfirmReq>(() => new GDChangeConfirmReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GDChangeConfirmReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDChangeConfirmReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDChangeConfirmReq(GDChangeConfirmReq other) : this() {
      roomKey_ = other.roomKey_;
      side_ = other.side_;
      cardNum_ = other.cardNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GDChangeConfirmReq Clone() {
      return new GDChangeConfirmReq(this);
    }

    /// <summary>Field number for the "room_key" field.</summary>
    public const int RoomKeyFieldNumber = 1;
    private string roomKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomKey {
      get { return roomKey_; }
      set {
        roomKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide side_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "card_num" field.</summary>
    public const int CardNumFieldNumber = 3;
    private int cardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardNum {
      get { return cardNum_; }
      set {
        cardNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GDChangeConfirmReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GDChangeConfirmReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomKey != other.RoomKey)return false;
      if (Side != other.Side)return false;
      if (CardNum != other.CardNum)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomKey.Length != 0)hash ^= RoomKey.GetHashCode();
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= Side.GetHashCode();
      if (CardNum != 0)hash ^= CardNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)Side);
      }
      if (CardNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomKey);
      }
      if (Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Side);
      }
      if (CardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GDChangeConfirmReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomKey.Length != 0) {
        RoomKey = other.RoomKey;
      }
      if (other.Side != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        Side = other.Side;
      }
      if (other.CardNum != 0) {
        CardNum = other.CardNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              RoomKey = input.ReadString();
              break;
            }
          case 16:
            {
              Side = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CardNum = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code