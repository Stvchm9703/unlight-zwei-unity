// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameDuelService/service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ULZAsset.ProtoMod.GameDuelService {
  /// <summary>
  /// ANCHOR: service-func for GameDuelService
  /// SECTION: service.proto
  /// </summary>
  public static partial class GameDuelService
  {
    static readonly string __ServiceName = "ULZProto.GameDuelService";

    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq> __Marshaller_ULZProto_GDGetInfoReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp> __Marshaller_ULZProto_GDBroadcastResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq> __Marshaller_ULZProto_GDCreateReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> __Marshaller_ULZProto_GameDataSet = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GameDataSet.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.Empty> __Marshaller_ULZProto_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT> __Marshaller_ULZProto_GDInstanceDT = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq> __Marshaller_ULZProto_GDMoveConfirmReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp> __Marshaller_ULZProto_GDMoveConfirmResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq> __Marshaller_ULZProto_GDADConfirmReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp> __Marshaller_ULZProto_GDADResultResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult> __Marshaller_ULZProto_GDADDiceResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq> __Marshaller_ULZProto_GDChangeConfirmReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq> __Marshaller_ULZProto_GDPhaseConfirmReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp> __Marshaller_ULZProto_GDPhaseConfirmResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp.Parser.ParseFrom);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp> __Method_ServerBroadcast = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerBroadcast",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GDBroadcastResp);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> __Method_CreateGame = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGame",
        __Marshaller_ULZProto_GDCreateReq,
        __Marshaller_ULZProto_GameDataSet);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> __Method_GetGameData = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameData",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GameDataSet);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.Empty> __Method_QuitGame = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuitGame",
        __Marshaller_ULZProto_GDCreateReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT, global::ULZAsset.ProtoMod.Empty> __Method_InstSetEventCard = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstSetEventCard",
        __Marshaller_ULZProto_GDInstanceDT,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty> __Method_DrawPhaseConfirm = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DrawPhaseConfirm",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq, global::ULZAsset.ProtoMod.Empty> __Method_MovePhaseConfirm = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MovePhaseConfirm",
        __Marshaller_ULZProto_GDMoveConfirmReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp> __Method_MovePhaseResult = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MovePhaseResult",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GDMoveConfirmResp);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq, global::ULZAsset.ProtoMod.Empty> __Method_ADPhaseConfirm = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ADPhaseConfirm",
        __Marshaller_ULZProto_GDADConfirmReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp> __Method_ADPhaseResult = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ADPhaseResult",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GDADResultResp);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult> __Method_ADPhaseDiceResult = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ADPhaseDiceResult",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GDADDiceResult);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq, global::ULZAsset.ProtoMod.Empty> __Method_ChangePhaseConfirm = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangePhaseConfirm",
        __Marshaller_ULZProto_GDChangeConfirmReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty> __Method_ChangePhaseResult = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangePhaseResult",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq, global::ULZAsset.ProtoMod.Empty> __Method_EventPhaseConfirm = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq, global::ULZAsset.ProtoMod.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EventPhaseConfirm",
        __Marshaller_ULZProto_GDPhaseConfirmReq,
        __Marshaller_ULZProto_Empty);

    static readonly grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp> __Method_EventPhaseResult = new grpc::Method<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EventPhaseResult",
        __Marshaller_ULZProto_GDGetInfoReq,
        __Marshaller_ULZProto_GDPhaseConfirmResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ULZAsset.ProtoMod.GameDuelService.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameDuelService</summary>
    [grpc::BindServiceMethod(typeof(GameDuelService), "BindService")]
    public abstract partial class GameDuelServiceBase
    {
      /// <summary>
      ///  Basic Server Function
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ServerBroadcast(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::IServerStreamWriter<global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> CreateGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> GetGameData(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> QuitGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GameSet Logic Function
      ///   instance card move               
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> InstSetEventCard(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Draw-phase : confirm 
      /// NOTE: After Broadcast Send &lt;[ refill_action_card_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard > 
      ///   { from their deck to own hand };
      ///   then, send this &lt; DrawPhaseConfirm > to notify the server 
      ///   that `client ready to start next phase [move_card_drop_phase]`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> DrawPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Move-phase : confirm
      /// NOTE:   After Broadcast Send &lt;[ move_card_drop_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard >
      ///       { from their own hand to out-side };
      ///   Then send this &lt; MovePhaseConfirm > to notify the server
      ///   that `client ready to start next phase [determine_move_phase]`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> MovePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp> MovePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> ADPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp> ADPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult> ADPhaseDiceResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> ChangePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> ChangePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.Empty> EventPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp> EventPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameDuelService</summary>
    public partial class GameDuelServiceClient : grpc::ClientBase<GameDuelServiceClient>
    {
      /// <summary>Creates a new client for GameDuelService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameDuelServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameDuelService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameDuelServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameDuelServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameDuelServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Basic Server Function
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp> ServerBroadcast(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerBroadcast(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Basic Server Function
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp> ServerBroadcast(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerBroadcast, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GameDataSet CreateGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GameDataSet CreateGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> CreateGameAsync(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> CreateGameAsync(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGame, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GameDataSet GetGameData(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GameDataSet GetGameData(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> GetGameDataAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GameDataSet> GetGameDataAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameData, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.Empty QuitGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuitGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.Empty QuitGame(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuitGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> QuitGameAsync(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QuitGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> QuitGameAsync(global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuitGame, null, options, request);
      }
      /// <summary>
      /// GameSet Logic Function
      ///   instance card move               
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty InstSetEventCard(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstSetEventCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GameSet Logic Function
      ///   instance card move               
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty InstSetEventCard(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstSetEventCard, null, options, request);
      }
      /// <summary>
      /// GameSet Logic Function
      ///   instance card move               
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> InstSetEventCardAsync(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstSetEventCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GameSet Logic Function
      ///   instance card move               
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> InstSetEventCardAsync(global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstSetEventCard, null, options, request);
      }
      /// <summary>
      /// Draw-phase : confirm 
      /// NOTE: After Broadcast Send &lt;[ refill_action_card_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard > 
      ///   { from their deck to own hand };
      ///   then, send this &lt; DrawPhaseConfirm > to notify the server 
      ///   that `client ready to start next phase [move_card_drop_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty DrawPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DrawPhaseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Draw-phase : confirm 
      /// NOTE: After Broadcast Send &lt;[ refill_action_card_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard > 
      ///   { from their deck to own hand };
      ///   then, send this &lt; DrawPhaseConfirm > to notify the server 
      ///   that `client ready to start next phase [move_card_drop_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty DrawPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DrawPhaseConfirm, null, options, request);
      }
      /// <summary>
      /// Draw-phase : confirm 
      /// NOTE: After Broadcast Send &lt;[ refill_action_card_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard > 
      ///   { from their deck to own hand };
      ///   then, send this &lt; DrawPhaseConfirm > to notify the server 
      ///   that `client ready to start next phase [move_card_drop_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> DrawPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DrawPhaseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Draw-phase : confirm 
      /// NOTE: After Broadcast Send &lt;[ refill_action_card_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard > 
      ///   { from their deck to own hand };
      ///   then, send this &lt; DrawPhaseConfirm > to notify the server 
      ///   that `client ready to start next phase [move_card_drop_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> DrawPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DrawPhaseConfirm, null, options, request);
      }
      /// <summary>
      /// Move-phase : confirm
      /// NOTE:   After Broadcast Send &lt;[ move_card_drop_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard >
      ///       { from their own hand to out-side };
      ///   Then send this &lt; MovePhaseConfirm > to notify the server
      ///   that `client ready to start next phase [determine_move_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty MovePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MovePhaseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move-phase : confirm
      /// NOTE:   After Broadcast Send &lt;[ move_card_drop_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard >
      ///       { from their own hand to out-side };
      ///   Then send this &lt; MovePhaseConfirm > to notify the server
      ///   that `client ready to start next phase [determine_move_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty MovePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MovePhaseConfirm, null, options, request);
      }
      /// <summary>
      /// Move-phase : confirm
      /// NOTE:   After Broadcast Send &lt;[ move_card_drop_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard >
      ///       { from their own hand to out-side };
      ///   Then send this &lt; MovePhaseConfirm > to notify the server
      ///   that `client ready to start next phase [determine_move_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> MovePhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MovePhaseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move-phase : confirm
      /// NOTE:   After Broadcast Send &lt;[ move_card_drop_phase ]>,
      ///   Client set the event-card by &lt; InstSetEventCard >
      ///       { from their own hand to out-side };
      ///   Then send this &lt; MovePhaseConfirm > to notify the server
      ///   that `client ready to start next phase [determine_move_phase]`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> MovePhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MovePhaseConfirm, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp MovePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MovePhaseResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp MovePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MovePhaseResult, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp> MovePhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MovePhaseResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp> MovePhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MovePhaseResult, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.Empty ADPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.Empty ADPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ADPhaseConfirm, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ADPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ADPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ADPhaseConfirm, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp ADPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp ADPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ADPhaseResult, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp> ADPhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp> ADPhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ADPhaseResult, null, options, request);
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult ADPhaseDiceResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseDiceResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult ADPhaseDiceResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ADPhaseDiceResult, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult> ADPhaseDiceResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ADPhaseDiceResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult> ADPhaseDiceResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ADPhaseDiceResult, null, options, request);
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty ChangePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePhaseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty ChangePhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangePhaseConfirm, null, options, request);
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ChangePhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePhaseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ChangePhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangePhaseConfirm, null, options, request);
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty ChangePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePhaseResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty ChangePhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangePhaseResult, null, options, request);
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ChangePhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePhaseResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChangeCharaPhase : Confirm and Result
      /// FIXME : 3v3 may need it, but 1v1 is not implement;
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> ChangePhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangePhaseResult, null, options, request);
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty EventPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EventPhaseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.Empty EventPhaseConfirm(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EventPhaseConfirm, null, options, request);
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> EventPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EventPhaseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.Empty> EventPhaseConfirmAsync(global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EventPhaseConfirm, null, options, request);
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp EventPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EventPhaseResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp EventPhaseResult(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EventPhaseResult, null, options, request);
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp> EventPhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EventPhaseResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Event-Phase : Confirm
      /// NOTE: Once the Server send any phase notify 
      ///   the client may send feedback to server that ready for phase 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp> EventPhaseResultAsync(global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EventPhaseResult, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameDuelServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameDuelServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameDuelServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ServerBroadcast, serviceImpl.ServerBroadcast)
          .AddMethod(__Method_CreateGame, serviceImpl.CreateGame)
          .AddMethod(__Method_GetGameData, serviceImpl.GetGameData)
          .AddMethod(__Method_QuitGame, serviceImpl.QuitGame)
          .AddMethod(__Method_InstSetEventCard, serviceImpl.InstSetEventCard)
          .AddMethod(__Method_DrawPhaseConfirm, serviceImpl.DrawPhaseConfirm)
          .AddMethod(__Method_MovePhaseConfirm, serviceImpl.MovePhaseConfirm)
          .AddMethod(__Method_MovePhaseResult, serviceImpl.MovePhaseResult)
          .AddMethod(__Method_ADPhaseConfirm, serviceImpl.ADPhaseConfirm)
          .AddMethod(__Method_ADPhaseResult, serviceImpl.ADPhaseResult)
          .AddMethod(__Method_ADPhaseDiceResult, serviceImpl.ADPhaseDiceResult)
          .AddMethod(__Method_ChangePhaseConfirm, serviceImpl.ChangePhaseConfirm)
          .AddMethod(__Method_ChangePhaseResult, serviceImpl.ChangePhaseResult)
          .AddMethod(__Method_EventPhaseConfirm, serviceImpl.EventPhaseConfirm)
          .AddMethod(__Method_EventPhaseResult, serviceImpl.EventPhaseResult).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GameDuelServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ServerBroadcast, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDBroadcastResp>(serviceImpl.ServerBroadcast));
      serviceBinder.AddMethod(__Method_CreateGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet>(serviceImpl.CreateGame));
      serviceBinder.AddMethod(__Method_GetGameData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GameDataSet>(serviceImpl.GetGameData));
      serviceBinder.AddMethod(__Method_QuitGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDCreateReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.QuitGame));
      serviceBinder.AddMethod(__Method_InstSetEventCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDInstanceDT, global::ULZAsset.ProtoMod.Empty>(serviceImpl.InstSetEventCard));
      serviceBinder.AddMethod(__Method_DrawPhaseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.DrawPhaseConfirm));
      serviceBinder.AddMethod(__Method_MovePhaseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.MovePhaseConfirm));
      serviceBinder.AddMethod(__Method_MovePhaseResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDMoveConfirmResp>(serviceImpl.MovePhaseResult));
      serviceBinder.AddMethod(__Method_ADPhaseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDADConfirmReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.ADPhaseConfirm));
      serviceBinder.AddMethod(__Method_ADPhaseResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADResultResp>(serviceImpl.ADPhaseResult));
      serviceBinder.AddMethod(__Method_ADPhaseDiceResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDADDiceResult>(serviceImpl.ADPhaseDiceResult));
      serviceBinder.AddMethod(__Method_ChangePhaseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDChangeConfirmReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.ChangePhaseConfirm));
      serviceBinder.AddMethod(__Method_ChangePhaseResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.ChangePhaseResult));
      serviceBinder.AddMethod(__Method_EventPhaseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmReq, global::ULZAsset.ProtoMod.Empty>(serviceImpl.EventPhaseConfirm));
      serviceBinder.AddMethod(__Method_EventPhaseResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ULZAsset.ProtoMod.GameDuelService.GDGetInfoReq, global::ULZAsset.ProtoMod.GameDuelService.GDPhaseConfirmResp>(serviceImpl.EventPhaseResult));
    }

  }
}
#endregion
