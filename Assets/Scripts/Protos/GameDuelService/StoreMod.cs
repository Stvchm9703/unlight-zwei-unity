// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameDuelService/StoreMod.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ULZAsset.ProtoMod.GameDuelService {

  /// <summary>Holder for reflection information generated from GameDuelService/StoreMod.proto</summary>
  public static partial class StoreModReflection {

    #region Descriptor
    /// <summary>File descriptor for GameDuelService/StoreMod.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StoreModReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5HYW1lRHVlbFNlcnZpY2UvU3RvcmVNb2QucHJvdG8SCFVMWlByb3RvGhpH",
          "YW1lRHVlbFNlcnZpY2UvRGF0YS5wcm90bxokR2FtZUR1ZWxTZXJ2aWNlL0V2",
          "ZW50SG9va1BoYXNlLnByb3RvIr8CChBNb3ZlUGhhc2VTbmFwTW9kEg0KBXR1",
          "cm5zGAEgASgFEhAKCGhvc3RfdmFsGAIgASgFEhAKCGR1ZWxfdmFsGAMgASgF",
          "EigKCGhvc3Rfb3B0GAQgASgOMhYuVUxaUHJvdG8uTW92ZVBoYXNlT3B0EigK",
          "CGR1ZWxfb3B0GAUgASgOMhYuVUxaUHJvdG8uTW92ZVBoYXNlT3B0EiYKCWhv",
          "c3RfY2FyZBgGIAMoCzITLlVMWlByb3RvLkV2ZW50Q2FyZBImCglkdWVsX2Nh",
          "cmQYByADKAsyEy5VTFpQcm90by5FdmVudENhcmQSKQoNaG9zdF90cmlnX3Nr",
          "bBgIIAMoCzISLlVMWlByb3RvLlNraWxsU2V0EikKDWR1ZWxfdHJpZ19za2wY",
          "CSADKAsyEi5VTFpQcm90by5Ta2lsbFNldCKWAwoOQURQaGFzZVNuYXBNb2QS",
          "DQoFdHVybnMYASABKAUSKgoMZmlyc3RfYXR0YWNrGAIgASgOMhQuVUxaUHJv",
          "dG8uUGxheWVyU2lkZRIrCg1jdXJyX2F0dGFja2VyGAMgASgOMhQuVUxaUHJv",
          "dG8uUGxheWVyU2lkZRItCgtldmVudF9waGFzZRgEIAEoDjIYLlVMWlByb3Rv",
          "LkV2ZW50SG9va1BoYXNlEhIKCmF0dGFja192YWwYBSABKAUSEwoLZGVmZW5j",
          "ZV92YWwYBiABKAUSKAoLYXR0YWNrX2NhcmQYByADKAsyEy5VTFpQcm90by5F",
          "dmVudENhcmQSKQoMZGVmZW5jZV9jYXJkGAggAygLMhMuVUxaUHJvdG8uRXZl",
          "bnRDYXJkEisKD2F0dGFja190cmlnX3NrbBgJIAMoCzISLlVMWlByb3RvLlNr",
          "aWxsU2V0EiwKEGRlZmVuY2VfdHJpZ19za2wYCiADKAsyEi5VTFpQcm90by5T",
          "a2lsbFNldBIUCgxpc19wcm9jZXNzZWQYCyABKAgiTgoRRWZmZWN0Tm9kZVNu",
          "YXBNb2QSDQoFdHVybnMYASABKAUSKgoKcGVuZGluZ19lZhgCIAMoCzIWLlVM",
          "WlByb3RvLkVmZmVjdFJlc3VsdCL9AQoMUGhhc2VTbmFwTW9kEg0KBXR1cm5z",
          "GAEgASgFEi0KC2V2ZW50X3BoYXNlGAIgASgOMhguVUxaUHJvdG8uRXZlbnRI",
          "b29rUGhhc2USKgoJaG9va190eXBlGAMgASgOMhcuVUxaUHJvdG8uRXZlbnRI",
          "b29rVHlwZRIVCg1pc19ob3N0X3JlYWR5GAQgASgIEhUKDWlzX2R1ZWxfcmVh",
          "ZHkYBSABKAgSKgoMZmlyc3RfYXR0YWNrGAYgASgOMhQuVUxaUHJvdG8uUGxh",
          "eWVyU2lkZRIpCgtjdXJyX2F0dGFjaxgHIAEoDjIULlVMWlByb3RvLlBsYXll",
          "clNpZGVCLVoHLjtwcm90b6oCIVVMWkFzc2V0LlByb3RvTW9kLkdhbWVEdWVs",
          "U2VydmljZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ULZAsset.ProtoMod.GameDuelService.DataReflection.Descriptor, global::ULZAsset.ProtoMod.GameDuelService.EventHookPhaseReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.MovePhaseSnapMod), global::ULZAsset.ProtoMod.GameDuelService.MovePhaseSnapMod.Parser, new [] { "Turns", "HostVal", "DuelVal", "HostOpt", "DuelOpt", "HostCard", "DuelCard", "HostTrigSkl", "DuelTrigSkl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.ADPhaseSnapMod), global::ULZAsset.ProtoMod.GameDuelService.ADPhaseSnapMod.Parser, new [] { "Turns", "FirstAttack", "CurrAttacker", "EventPhase", "AttackVal", "DefenceVal", "AttackCard", "DefenceCard", "AttackTrigSkl", "DefenceTrigSkl", "IsProcessed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.EffectNodeSnapMod), global::ULZAsset.ProtoMod.GameDuelService.EffectNodeSnapMod.Parser, new [] { "Turns", "PendingEf" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameDuelService.PhaseSnapMod), global::ULZAsset.ProtoMod.GameDuelService.PhaseSnapMod.Parser, new [] { "Turns", "EventPhase", "HookType", "IsHostReady", "IsDuelReady", "FirstAttack", "CurrAttack" }, null, null, null)
        }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Move-Phase-SnapMod
  /// </summary>
  public sealed partial class MovePhaseSnapMod : pb::IMessage<MovePhaseSnapMod> {
    private static readonly pb::MessageParser<MovePhaseSnapMod> _parser = new pb::MessageParser<MovePhaseSnapMod>(() => new MovePhaseSnapMod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MovePhaseSnapMod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.StoreModReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePhaseSnapMod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePhaseSnapMod(MovePhaseSnapMod other) : this() {
      turns_ = other.turns_;
      hostVal_ = other.hostVal_;
      duelVal_ = other.duelVal_;
      hostOpt_ = other.hostOpt_;
      duelOpt_ = other.duelOpt_;
      hostCard_ = other.hostCard_.Clone();
      duelCard_ = other.duelCard_.Clone();
      hostTrigSkl_ = other.hostTrigSkl_.Clone();
      duelTrigSkl_ = other.duelTrigSkl_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MovePhaseSnapMod Clone() {
      return new MovePhaseSnapMod(this);
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 1;
    private int turns_;
    /// <summary>
    ///  flaging 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "host_val" field.</summary>
    public const int HostValFieldNumber = 2;
    private int hostVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HostVal {
      get { return hostVal_; }
      set {
        hostVal_ = value;
      }
    }

    /// <summary>Field number for the "duel_val" field.</summary>
    public const int DuelValFieldNumber = 3;
    private int duelVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DuelVal {
      get { return duelVal_; }
      set {
        duelVal_ = value;
      }
    }

    /// <summary>Field number for the "host_opt" field.</summary>
    public const int HostOptFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt hostOpt_ = global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt HostOpt {
      get { return hostOpt_; }
      set {
        hostOpt_ = value;
      }
    }

    /// <summary>Field number for the "duel_opt" field.</summary>
    public const int DuelOptFieldNumber = 5;
    private global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt duelOpt_ = global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt DuelOpt {
      get { return duelOpt_; }
      set {
        duelOpt_ = value;
      }
    }

    /// <summary>Field number for the "host_card" field.</summary>
    public const int HostCardFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_hostCard_codec = pb::FieldCodec.ForMessage(50, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> hostCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> HostCard {
      get { return hostCard_; }
    }

    /// <summary>Field number for the "duel_card" field.</summary>
    public const int DuelCardFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_duelCard_codec = pb::FieldCodec.ForMessage(58, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> duelCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> DuelCard {
      get { return duelCard_; }
    }

    /// <summary>Field number for the "host_trig_skl" field.</summary>
    public const int HostTrigSklFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_hostTrigSkl_codec = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> hostTrigSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> HostTrigSkl {
      get { return hostTrigSkl_; }
    }

    /// <summary>Field number for the "duel_trig_skl" field.</summary>
    public const int DuelTrigSklFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_duelTrigSkl_codec = pb::FieldCodec.ForMessage(74, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> duelTrigSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> DuelTrigSkl {
      get { return duelTrigSkl_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MovePhaseSnapMod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MovePhaseSnapMod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Turns != other.Turns)return false;
      if (HostVal != other.HostVal)return false;
      if (DuelVal != other.DuelVal)return false;
      if (HostOpt != other.HostOpt)return false;
      if (DuelOpt != other.DuelOpt)return false;
      if (!hostCard_.Equals(other.hostCard_))return false;
      if (!duelCard_.Equals(other.duelCard_))return false;
      if (!hostTrigSkl_.Equals(other.hostTrigSkl_))return false;
      if (!duelTrigSkl_.Equals(other.duelTrigSkl_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Turns != 0)hash ^= Turns.GetHashCode();
      if (HostVal != 0)hash ^= HostVal.GetHashCode();
      if (DuelVal != 0)hash ^= DuelVal.GetHashCode();
      if (HostOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove)hash ^= HostOpt.GetHashCode();
      if (DuelOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove)hash ^= DuelOpt.GetHashCode();
      hash ^= hostCard_.GetHashCode();
      hash ^= duelCard_.GetHashCode();
      hash ^= hostTrigSkl_.GetHashCode();
      hash ^= duelTrigSkl_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Turns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Turns);
      }
      if (HostVal != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HostVal);
      }
      if (DuelVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DuelVal);
      }
      if (HostOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        output.WriteRawTag(32);
        output.WriteEnum((int)HostOpt);
      }
      if (DuelOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        output.WriteRawTag(40);
        output.WriteEnum((int)DuelOpt);
      }
      hostCard_.WriteTo(output, _repeated_hostCard_codec);
      duelCard_.WriteTo(output, _repeated_duelCard_codec);
      hostTrigSkl_.WriteTo(output, _repeated_hostTrigSkl_codec);
      duelTrigSkl_.WriteTo(output, _repeated_duelTrigSkl_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (HostVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HostVal);
      }
      if (DuelVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DuelVal);
      }
      if (HostOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HostOpt);
      }
      if (DuelOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DuelOpt);
      }
      size += hostCard_.CalculateSize(_repeated_hostCard_codec);
      size += duelCard_.CalculateSize(_repeated_duelCard_codec);
      size += hostTrigSkl_.CalculateSize(_repeated_hostTrigSkl_codec);
      size += duelTrigSkl_.CalculateSize(_repeated_duelTrigSkl_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MovePhaseSnapMod other) {
      if (other == null) {
        return;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.HostVal != 0) {
        HostVal = other.HostVal;
      }
      if (other.DuelVal != 0) {
        DuelVal = other.DuelVal;
      }
      if (other.HostOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        HostOpt = other.HostOpt;
      }
      if (other.DuelOpt != global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt.NoMove) {
        DuelOpt = other.DuelOpt;
      }
      hostCard_.Add(other.hostCard_);
      duelCard_.Add(other.duelCard_);
      hostTrigSkl_.Add(other.hostTrigSkl_);
      duelTrigSkl_.Add(other.duelTrigSkl_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 16:
            {
              HostVal = input.ReadInt32();
              break;
            }
          case 24:
            {
              DuelVal = input.ReadInt32();
              break;
            }
          case 32:
            {
              HostOpt = (global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt)input.ReadEnum();
              break;
            }
          case 40:
            {
              DuelOpt = (global::ULZAsset.ProtoMod.GameDuelService.MovePhaseOpt)input.ReadEnum();
              break;
            }
          case 50:
            {
              hostCard_.AddEntriesFrom(input, _repeated_hostCard_codec);
              break;
            }
          case 58:
            {
              duelCard_.AddEntriesFrom(input, _repeated_duelCard_codec);
              break;
            }
          case 66:
            {
              hostTrigSkl_.AddEntriesFrom(input, _repeated_hostTrigSkl_codec);
              break;
            }
          case 74:
            {
              duelTrigSkl_.AddEntriesFrom(input, _repeated_duelTrigSkl_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// AD-Phase-SnapMod
  /// </summary>
  public sealed partial class ADPhaseSnapMod : pb::IMessage<ADPhaseSnapMod> {
    private static readonly pb::MessageParser<ADPhaseSnapMod> _parser = new pb::MessageParser<ADPhaseSnapMod>(() => new ADPhaseSnapMod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ADPhaseSnapMod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.StoreModReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADPhaseSnapMod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADPhaseSnapMod(ADPhaseSnapMod other) : this() {
      turns_ = other.turns_;
      firstAttack_ = other.firstAttack_;
      currAttacker_ = other.currAttacker_;
      eventPhase_ = other.eventPhase_;
      attackVal_ = other.attackVal_;
      defenceVal_ = other.defenceVal_;
      attackCard_ = other.attackCard_.Clone();
      defenceCard_ = other.defenceCard_.Clone();
      attackTrigSkl_ = other.attackTrigSkl_.Clone();
      defenceTrigSkl_ = other.defenceTrigSkl_.Clone();
      isProcessed_ = other.isProcessed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ADPhaseSnapMod Clone() {
      return new ADPhaseSnapMod(this);
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 1;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "first_attack" field.</summary>
    public const int FirstAttackFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide firstAttack_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide FirstAttack {
      get { return firstAttack_; }
      set {
        firstAttack_ = value;
      }
    }

    /// <summary>Field number for the "curr_attacker" field.</summary>
    public const int CurrAttackerFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide currAttacker_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide CurrAttacker {
      get { return currAttacker_; }
      set {
        currAttacker_ = value;
      }
    }

    /// <summary>Field number for the "event_phase" field.</summary>
    public const int EventPhaseFieldNumber = 4;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase eventPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase EventPhase {
      get { return eventPhase_; }
      set {
        eventPhase_ = value;
      }
    }

    /// <summary>Field number for the "attack_val" field.</summary>
    public const int AttackValFieldNumber = 5;
    private int attackVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackVal {
      get { return attackVal_; }
      set {
        attackVal_ = value;
      }
    }

    /// <summary>Field number for the "defence_val" field.</summary>
    public const int DefenceValFieldNumber = 6;
    private int defenceVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenceVal {
      get { return defenceVal_; }
      set {
        defenceVal_ = value;
      }
    }

    /// <summary>Field number for the "attack_card" field.</summary>
    public const int AttackCardFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_attackCard_codec = pb::FieldCodec.ForMessage(58, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> attackCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> AttackCard {
      get { return attackCard_; }
    }

    /// <summary>Field number for the "defence_card" field.</summary>
    public const int DefenceCardFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EventCard> _repeated_defenceCard_codec = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.GameDuelService.EventCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> defenceCard_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EventCard> DefenceCard {
      get { return defenceCard_; }
    }

    /// <summary>Field number for the "attack_trig_skl" field.</summary>
    public const int AttackTrigSklFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_attackTrigSkl_codec = pb::FieldCodec.ForMessage(74, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> attackTrigSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> AttackTrigSkl {
      get { return attackTrigSkl_; }
    }

    /// <summary>Field number for the "defence_trig_skl" field.</summary>
    public const int DefenceTrigSklFieldNumber = 10;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> _repeated_defenceTrigSkl_codec = pb::FieldCodec.ForMessage(82, global::ULZAsset.ProtoMod.GameDuelService.SkillSet.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> defenceTrigSkl_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.SkillSet> DefenceTrigSkl {
      get { return defenceTrigSkl_; }
    }

    /// <summary>Field number for the "is_processed" field.</summary>
    public const int IsProcessedFieldNumber = 11;
    private bool isProcessed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProcessed {
      get { return isProcessed_; }
      set {
        isProcessed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ADPhaseSnapMod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ADPhaseSnapMod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Turns != other.Turns)return false;
      if (FirstAttack != other.FirstAttack)return false;
      if (CurrAttacker != other.CurrAttacker)return false;
      if (EventPhase != other.EventPhase)return false;
      if (AttackVal != other.AttackVal)return false;
      if (DefenceVal != other.DefenceVal)return false;
      if (!attackCard_.Equals(other.attackCard_))return false;
      if (!defenceCard_.Equals(other.defenceCard_))return false;
      if (!attackTrigSkl_.Equals(other.attackTrigSkl_))return false;
      if (!defenceTrigSkl_.Equals(other.defenceTrigSkl_))return false;
      if (IsProcessed != other.IsProcessed)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Turns != 0)hash ^= Turns.GetHashCode();
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= FirstAttack.GetHashCode();
      if (CurrAttacker != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= CurrAttacker.GetHashCode();
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= EventPhase.GetHashCode();
      if (AttackVal != 0)hash ^= AttackVal.GetHashCode();
      if (DefenceVal != 0)hash ^= DefenceVal.GetHashCode();
      hash ^= attackCard_.GetHashCode();
      hash ^= defenceCard_.GetHashCode();
      hash ^= attackTrigSkl_.GetHashCode();
      hash ^= defenceTrigSkl_.GetHashCode();
      if (IsProcessed != false)hash ^= IsProcessed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Turns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Turns);
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(16);
        output.WriteEnum((int)FirstAttack);
      }
      if (CurrAttacker != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(24);
        output.WriteEnum((int)CurrAttacker);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(32);
        output.WriteEnum((int)EventPhase);
      }
      if (AttackVal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AttackVal);
      }
      if (DefenceVal != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DefenceVal);
      }
      attackCard_.WriteTo(output, _repeated_attackCard_codec);
      defenceCard_.WriteTo(output, _repeated_defenceCard_codec);
      attackTrigSkl_.WriteTo(output, _repeated_attackTrigSkl_codec);
      defenceTrigSkl_.WriteTo(output, _repeated_defenceTrigSkl_codec);
      if (IsProcessed != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsProcessed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FirstAttack);
      }
      if (CurrAttacker != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrAttacker);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventPhase);
      }
      if (AttackVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackVal);
      }
      if (DefenceVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenceVal);
      }
      size += attackCard_.CalculateSize(_repeated_attackCard_codec);
      size += defenceCard_.CalculateSize(_repeated_defenceCard_codec);
      size += attackTrigSkl_.CalculateSize(_repeated_attackTrigSkl_codec);
      size += defenceTrigSkl_.CalculateSize(_repeated_defenceTrigSkl_codec);
      if (IsProcessed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ADPhaseSnapMod other) {
      if (other == null) {
        return;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        FirstAttack = other.FirstAttack;
      }
      if (other.CurrAttacker != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        CurrAttacker = other.CurrAttacker;
      }
      if (other.EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        EventPhase = other.EventPhase;
      }
      if (other.AttackVal != 0) {
        AttackVal = other.AttackVal;
      }
      if (other.DefenceVal != 0) {
        DefenceVal = other.DefenceVal;
      }
      attackCard_.Add(other.attackCard_);
      defenceCard_.Add(other.defenceCard_);
      attackTrigSkl_.Add(other.attackTrigSkl_);
      defenceTrigSkl_.Add(other.defenceTrigSkl_);
      if (other.IsProcessed != false) {
        IsProcessed = other.IsProcessed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 16:
            {
              FirstAttack = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 24:
            {
              CurrAttacker = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 32:
            {
              EventPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 40:
            {
              AttackVal = input.ReadInt32();
              break;
            }
          case 48:
            {
              DefenceVal = input.ReadInt32();
              break;
            }
          case 58:
            {
              attackCard_.AddEntriesFrom(input, _repeated_attackCard_codec);
              break;
            }
          case 66:
            {
              defenceCard_.AddEntriesFrom(input, _repeated_defenceCard_codec);
              break;
            }
          case 74:
            {
              attackTrigSkl_.AddEntriesFrom(input, _repeated_attackTrigSkl_codec);
              break;
            }
          case 82:
            {
              defenceTrigSkl_.AddEntriesFrom(input, _repeated_defenceTrigSkl_codec);
              break;
            }
          case 88:
            {
              IsProcessed = input.ReadBool();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// // Effect-Status-SnapMod
  /// </summary>
  public sealed partial class EffectNodeSnapMod : pb::IMessage<EffectNodeSnapMod> {
    private static readonly pb::MessageParser<EffectNodeSnapMod> _parser = new pb::MessageParser<EffectNodeSnapMod>(() => new EffectNodeSnapMod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectNodeSnapMod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.StoreModReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectNodeSnapMod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectNodeSnapMod(EffectNodeSnapMod other) : this() {
      turns_ = other.turns_;
      pendingEf_ = other.pendingEf_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectNodeSnapMod Clone() {
      return new EffectNodeSnapMod(this);
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 1;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "pending_ef" field.</summary>
    public const int PendingEfFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> _repeated_pendingEf_codec = pb::FieldCodec.ForMessage(18, global::ULZAsset.ProtoMod.GameDuelService.EffectResult.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> pendingEf_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.GameDuelService.EffectResult> PendingEf {
      get { return pendingEf_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectNodeSnapMod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectNodeSnapMod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Turns != other.Turns)return false;
      if (!pendingEf_.Equals(other.pendingEf_))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Turns != 0)hash ^= Turns.GetHashCode();
      hash ^= pendingEf_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Turns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Turns);
      }
      pendingEf_.WriteTo(output, _repeated_pendingEf_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      size += pendingEf_.CalculateSize(_repeated_pendingEf_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectNodeSnapMod other) {
      if (other == null) {
        return;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      pendingEf_.Add(other.pendingEf_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 18:
            {
              pendingEf_.AddEntriesFrom(input, _repeated_pendingEf_codec);
              break;
            }
        }
      }
    }

  }

  /// <summary>
  /// PhaseInstance-SnapMod
  /// </summary>
  public sealed partial class PhaseSnapMod : pb::IMessage<PhaseSnapMod> {
    private static readonly pb::MessageParser<PhaseSnapMod> _parser = new pb::MessageParser<PhaseSnapMod>(() => new PhaseSnapMod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhaseSnapMod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GameDuelService.StoreModReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseSnapMod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseSnapMod(PhaseSnapMod other) : this() {
      turns_ = other.turns_;
      eventPhase_ = other.eventPhase_;
      hookType_ = other.hookType_;
      isHostReady_ = other.isHostReady_;
      isDuelReady_ = other.isDuelReady_;
      firstAttack_ = other.firstAttack_;
      currAttack_ = other.currAttack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseSnapMod Clone() {
      return new PhaseSnapMod(this);
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 1;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "event_phase" field.</summary>
    public const int EventPhaseFieldNumber = 2;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase eventPhase_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase EventPhase {
      get { return eventPhase_; }
      set {
        eventPhase_ = value;
      }
    }

    /// <summary>Field number for the "hook_type" field.</summary>
    public const int HookTypeFieldNumber = 3;
    private global::ULZAsset.ProtoMod.GameDuelService.EventHookType hookType_ = global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.EventHookType HookType {
      get { return hookType_; }
      set {
        hookType_ = value;
      }
    }

    /// <summary>Field number for the "is_host_ready" field.</summary>
    public const int IsHostReadyFieldNumber = 4;
    private bool isHostReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHostReady {
      get { return isHostReady_; }
      set {
        isHostReady_ = value;
      }
    }

    /// <summary>Field number for the "is_duel_ready" field.</summary>
    public const int IsDuelReadyFieldNumber = 5;
    private bool isDuelReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuelReady {
      get { return isDuelReady_; }
      set {
        isDuelReady_ = value;
      }
    }

    /// <summary>Field number for the "first_attack" field.</summary>
    public const int FirstAttackFieldNumber = 6;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide firstAttack_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide FirstAttack {
      get { return firstAttack_; }
      set {
        firstAttack_ = value;
      }
    }

    /// <summary>Field number for the "curr_attack" field.</summary>
    public const int CurrAttackFieldNumber = 7;
    private global::ULZAsset.ProtoMod.GameDuelService.PlayerSide currAttack_ = global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host;
    /// <summary>
    /// EventHookType               hook_type               = 16;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.GameDuelService.PlayerSide CurrAttack {
      get { return currAttack_; }
      set {
        currAttack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhaseSnapMod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhaseSnapMod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Turns != other.Turns)return false;
      if (EventPhase != other.EventPhase)return false;
      if (HookType != other.HookType)return false;
      if (IsHostReady != other.IsHostReady)return false;
      if (IsDuelReady != other.IsDuelReady)return false;
      if (FirstAttack != other.FirstAttack)return false;
      if (CurrAttack != other.CurrAttack)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Turns != 0)hash ^= Turns.GetHashCode();
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart)hash ^= EventPhase.GetHashCode();
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant)hash ^= HookType.GetHashCode();
      if (IsHostReady != false)hash ^= IsHostReady.GetHashCode();
      if (IsDuelReady != false)hash ^= IsDuelReady.GetHashCode();
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= FirstAttack.GetHashCode();
      if (CurrAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host)hash ^= CurrAttack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Turns != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Turns);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        output.WriteRawTag(16);
        output.WriteEnum((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        output.WriteRawTag(24);
        output.WriteEnum((int)HookType);
      }
      if (IsHostReady != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsHostReady);
      }
      if (IsDuelReady != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsDuelReady);
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(48);
        output.WriteEnum((int)FirstAttack);
      }
      if (CurrAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        output.WriteRawTag(56);
        output.WriteEnum((int)CurrAttack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventPhase);
      }
      if (HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HookType);
      }
      if (IsHostReady != false) {
        size += 1 + 1;
      }
      if (IsDuelReady != false) {
        size += 1 + 1;
      }
      if (FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)FirstAttack);
      }
      if (CurrAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CurrAttack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhaseSnapMod other) {
      if (other == null) {
        return;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.EventPhase != global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase.GamesetStart) {
        EventPhase = other.EventPhase;
      }
      if (other.HookType != global::ULZAsset.ProtoMod.GameDuelService.EventHookType.Instant) {
        HookType = other.HookType;
      }
      if (other.IsHostReady != false) {
        IsHostReady = other.IsHostReady;
      }
      if (other.IsDuelReady != false) {
        IsDuelReady = other.IsDuelReady;
      }
      if (other.FirstAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        FirstAttack = other.FirstAttack;
      }
      if (other.CurrAttack != global::ULZAsset.ProtoMod.GameDuelService.PlayerSide.Host) {
        CurrAttack = other.CurrAttack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 16:
            {
              EventPhase = (global::ULZAsset.ProtoMod.GameDuelService.EventHookPhase)input.ReadEnum();
              break;
            }
          case 24:
            {
              HookType = (global::ULZAsset.ProtoMod.GameDuelService.EventHookType)input.ReadEnum();
              break;
            }
          case 32:
            {
              IsHostReady = input.ReadBool();
              break;
            }
          case 40:
            {
              IsDuelReady = input.ReadBool();
              break;
            }
          case 48:
            {
              FirstAttack = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
          case 56:
            {
              CurrAttack = (global::ULZAsset.ProtoMod.GameDuelService.PlayerSide)input.ReadEnum();
              break;
            }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code