// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RoomService/message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ULZAsset.ProtoMod {

  /// <summary>Holder for reflection information generated from RoomService/message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for RoomService/message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChlSb29tU2VydmljZS9tZXNzYWdlLnByb3RvEghVTFpQcm90bxoMY29tbW9u",
          "LnByb3RvIkwKDlJtQ2hhckNhcmRJbmZvEg8KB2NhcmRfaWQYASABKAUSDQoF",
          "bGV2ZWwYAiABKAUSDAoEcmFyZRgDIAEoBRIMCgRjb3N0GAQgASgFImUKClJt",
          "VXNlckluZm8SCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRINCgVsZXZlbBgD",
          "IAEoBRIRCglhdmF0X2ljb24YBCABKAkSDQoFdGl0bGUYBSABKAkSDAoEcmFu",
          "axgGIAEoBSLlAgoEUm9vbRIKCgJpZBgBIAEoCRILCgNrZXkYAiABKAkSEAoI",
          "cGFzc3dvcmQYAyABKAkSIgoEaG9zdBgEIAEoCzIULlVMWlByb3RvLlJtVXNl",
          "ckluZm8SJAoGZHVlbGVyGAUgASgLMhQuVUxaUHJvdG8uUm1Vc2VySW5mbxIk",
          "CgZzdGF0dXMYByABKA4yFC5VTFpQcm90by5Sb29tU3RhdHVzEg0KBXR1cm5z",
          "GAggASgFEhYKDmNvc3RfbGltaXRfbWF4GAkgASgFEhYKDmNvc3RfbGltaXRf",
          "bWluGAogASgFEjUKE2NoYXJfY2FyZF9saW1pdF9tYXgYCyABKAsyGC5VTFpQ",
          "cm90by5SbUNoYXJDYXJkSW5mbxI1ChNjaGFyX2NhcmRfbGltaXRfbWluGAwg",
          "ASgLMhguVUxaUHJvdG8uUm1DaGFyQ2FyZEluZm8SFQoNY2hhcl9jYXJkX252",
          "bhgNIAEoBSLTAQoHUm9vbU1zZxILCgNrZXkYASABKAkSDwoHZm9ybV9pZBgC",
          "IAEoCRINCgV0b19pZBgDIAEoCRIPCgdtZXNzYWdlGAQgASgJEisKCG1zZ190",
          "eXBlGAUgASgOMhkuVUxaUHJvdG8uUm9vbU1zZy5Nc2dUeXBlIl0KB01zZ1R5",
          "cGUSDQoJVVNFUl9URVhUEAASEQoNVVNFUl9TVFJJQ0tFUhABEg8KC1NZU1RF",
          "TV9JTkZPEAISDwoLU1lTVEVNX1dBUk4QAxIOCgpTWVNURU1fRVJSEAQiXQoH",
          "Um9vbVJlcRILCgNrZXkYASABKAkSIgoEdXNlchgCIAEoCzIULlVMWlByb3Rv",
          "LlJtVXNlckluZm8SDwoHaXNfZHVlbBgDIAEoCBIQCghwYXNzd29yZBgEIAEo",
          "CSKHAgoNUm9vbUNyZWF0ZVJlcRILCgNrZXkYASABKAkSIgoEaG9zdBgCIAEo",
          "CzIULlVMWlByb3RvLlJtVXNlckluZm8SEAoIcGFzc3dvcmQYAyABKAkSFgoO",
          "Y29zdF9saW1pdF9tYXgYBCABKAUSFgoOY29zdF9saW1pdF9taW4YBSABKAUS",
          "FQoNY2hhcl9jYXJkX252bhgGIAEoBRI1ChNjaGFyX2NhcmRfbGltaXRfbWF4",
          "GAcgASgLMhguVUxaUHJvdG8uUm1DaGFyQ2FyZEluZm8SNQoTY2hhcl9jYXJk",
          "X2xpbWl0X21pbhgIIAEoCzIYLlVMWlByb3RvLlJtQ2hhckNhcmRJbmZvKlAK",
          "ClJvb21TdGF0dXMSCwoHT05fSU5JVBAAEgsKB09OX1dBSVQQARIMCghPTl9T",
          "VEFSVBACEgoKBk9OX0VORBADEg4KCk9OX0RFU1RST1kQBEJCChlpby5ncnBj",
          "LlVMWkFzc2V0LlByb3RvTW9kQghVTFpBc3NldFABWgVwcm90b6oCEVVMWkFz",
          "c2V0LlByb3RvTW9kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ULZAsset.ProtoMod.CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new [] { typeof(global::ULZAsset.ProtoMod.RoomStatus), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.RmCharCardInfo), global::ULZAsset.ProtoMod.RmCharCardInfo.Parser, new [] { "CardId", "Level", "Rare", "Cost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.RmUserInfo), global::ULZAsset.ProtoMod.RmUserInfo.Parser, new [] { "Id", "Name", "Level", "AvatIcon", "Title", "Rank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.Room), global::ULZAsset.ProtoMod.Room.Parser, new [] { "Id", "Key", "Password", "Host", "Dueler", "Status", "Turns", "CostLimitMax", "CostLimitMin", "CharCardLimitMax", "CharCardLimitMin", "CharCardNvn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.RoomMsg), global::ULZAsset.ProtoMod.RoomMsg.Parser, new [] { "Key", "FormId", "ToId", "Message", "MsgType" }, null, new [] { typeof(global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.RoomReq), global::ULZAsset.ProtoMod.RoomReq.Parser, new [] { "Key", "User", "IsDuel", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.RoomCreateReq), global::ULZAsset.ProtoMod.RoomCreateReq.Parser, new [] { "Key", "Host", "Password", "CostLimitMax", "CostLimitMin", "CharCardNvn", "CharCardLimitMax", "CharCardLimitMin" }, null, null, null)
        }));
    }
    #endregion

  }
  #region Enums
  public enum RoomStatus {
    [pbr::OriginalName("ON_INIT")] OnInit = 0, [pbr::OriginalName("ON_WAIT")] OnWait = 1, [pbr::OriginalName("ON_START")] OnStart = 2, [pbr::OriginalName("ON_END")] OnEnd = 3, [pbr::OriginalName("ON_DESTROY")] OnDestroy = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// RmCharCardInfo
  ///      Basic Character Card Infomation 
  /// </summary>
  public sealed partial class RmCharCardInfo : pb::IMessage<RmCharCardInfo> {
    private static readonly pb::MessageParser<RmCharCardInfo> _parser = new pb::MessageParser<RmCharCardInfo>(() => new RmCharCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RmCharCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmCharCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmCharCardInfo(RmCharCardInfo other) : this() {
      cardId_ = other.cardId_;
      level_ = other.level_;
      rare_ = other.rare_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmCharCardInfo Clone() {
      return new RmCharCardInfo(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "rare" field.</summary>
    public const int RareFieldNumber = 3;
    private int rare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rare {
      get { return rare_; }
      set {
        rare_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 4;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RmCharCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RmCharCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId)return false;
      if (Level != other.Level)return false;
      if (Rare != other.Rare)return false;
      if (Cost != other.Cost)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId != 0)hash ^= CardId.GetHashCode();
      if (Level != 0)hash ^= Level.GetHashCode();
      if (Rare != 0)hash ^= Rare.GetHashCode();
      if (Cost != 0)hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Rare != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rare);
      }
      if (Cost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Rare != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rare);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RmCharCardInfo other) {
      if (other == null) {
        return;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Rare != 0) {
        Rare = other.Rare;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 8:
            {
              CardId = input.ReadInt32();
              break;
            }
          case 16:
            {
              Level = input.ReadInt32();
              break;
            }
          case 24:
            {
              Rare = input.ReadInt32();
              break;
            }
          case 32:
            {
              Cost = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///RmUserInfo :
  ///User basic Information for room info displaying
  /// </summary>
  public sealed partial class RmUserInfo : pb::IMessage<RmUserInfo> {
    private static readonly pb::MessageParser<RmUserInfo> _parser = new pb::MessageParser<RmUserInfo>(() => new RmUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RmUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmUserInfo(RmUserInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      level_ = other.level_;
      avatIcon_ = other.avatIcon_;
      title_ = other.title_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmUserInfo Clone() {
      return new RmUserInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "avat_icon" field.</summary>
    public const int AvatIconFieldNumber = 4;
    private string avatIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatIcon {
      get { return avatIcon_; }
      set {
        avatIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RmUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RmUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id)return false;
      if (Name != other.Name)return false;
      if (Level != other.Level)return false;
      if (AvatIcon != other.AvatIcon)return false;
      if (Title != other.Title)return false;
      if (Rank != other.Rank)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0)hash ^= Id.GetHashCode();
      if (Name.Length != 0)hash ^= Name.GetHashCode();
      if (Level != 0)hash ^= Level.GetHashCode();
      if (AvatIcon.Length != 0)hash ^= AvatIcon.GetHashCode();
      if (Title.Length != 0)hash ^= Title.GetHashCode();
      if (Rank != 0)hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (AvatIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatIcon);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (AvatIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatIcon);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RmUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.AvatIcon.Length != 0) {
        AvatIcon = other.AvatIcon;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              Id = input.ReadString();
              break;
            }
          case 18:
            {
              Name = input.ReadString();
              break;
            }
          case 24:
            {
              Level = input.ReadInt32();
              break;
            }
          case 34:
            {
              AvatIcon = input.ReadString();
              break;
            }
          case 42:
            {
              Title = input.ReadString();
              break;
            }
          case 48:
            {
              Rank = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///Room :
  ///Room Detail Information 
  /// </summary>
  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      password_ = other.password_;
      host_ = other.host_ != null ? other.host_.Clone() : null;
      dueler_ = other.dueler_ != null ? other.dueler_.Clone() : null;
      status_ = other.status_;
      turns_ = other.turns_;
      costLimitMax_ = other.costLimitMax_;
      costLimitMin_ = other.costLimitMin_;
      charCardLimitMax_ = other.charCardLimitMax_ != null ? other.charCardLimitMax_.Clone() : null;
      charCardLimitMin_ = other.charCardLimitMin_ != null ? other.charCardLimitMin_.Clone() : null;
      charCardNvn_ = other.charCardNvn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Room-id the id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Room-Key the id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    /// <summary>
    /// Room Password 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private global::ULZAsset.ProtoMod.RmUserInfo host_;
    /// <summary>
    /// User-info for room-host player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmUserInfo Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "dueler" field.</summary>
    public const int DuelerFieldNumber = 5;
    private global::ULZAsset.ProtoMod.RmUserInfo dueler_;
    /// <summary>
    /// User-info for dueler-player 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmUserInfo Dueler {
      get { return dueler_; }
      set {
        dueler_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::ULZAsset.ProtoMod.RoomStatus status_ = global::ULZAsset.ProtoMod.RoomStatus.OnInit;
    /// <summary>
    /// Rooms Status 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RoomStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 8;
    private int turns_;
    /// <summary>
    /// Turns number of Game Duel 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "cost_limit_max" field.</summary>
    public const int CostLimitMaxFieldNumber = 9;
    private int costLimitMax_;
    /// <summary>
    /// Limitation for total Card-Deck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostLimitMax {
      get { return costLimitMax_; }
      set {
        costLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "cost_limit_min" field.</summary>
    public const int CostLimitMinFieldNumber = 10;
    private int costLimitMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostLimitMin {
      get { return costLimitMin_; }
      set {
        costLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "char_card_limit_max" field.</summary>
    public const int CharCardLimitMaxFieldNumber = 11;
    private global::ULZAsset.ProtoMod.RmCharCardInfo charCardLimitMax_;
    /// <summary>
    /// Limitation for Charecter Card Cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmCharCardInfo CharCardLimitMax {
      get { return charCardLimitMax_; }
      set {
        charCardLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "char_card_limit_min" field.</summary>
    public const int CharCardLimitMinFieldNumber = 12;
    private global::ULZAsset.ProtoMod.RmCharCardInfo charCardLimitMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmCharCardInfo CharCardLimitMin {
      get { return charCardLimitMin_; }
      set {
        charCardLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "char_card_nvn" field.</summary>
    public const int CharCardNvnFieldNumber = 13;
    private int charCardNvn_;
    /// <summary>
    /// 1vs1 or 3vs3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharCardNvn {
      get { return charCardNvn_; }
      set {
        charCardNvn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id)return false;
      if (Key != other.Key)return false;
      if (Password != other.Password)return false;
      if (!object.Equals(Host, other.Host))return false;
      if (!object.Equals(Dueler, other.Dueler))return false;
      if (Status != other.Status)return false;
      if (Turns != other.Turns)return false;
      if (CostLimitMax != other.CostLimitMax)return false;
      if (CostLimitMin != other.CostLimitMin)return false;
      if (!object.Equals(CharCardLimitMax, other.CharCardLimitMax))return false;
      if (!object.Equals(CharCardLimitMin, other.CharCardLimitMin))return false;
      if (CharCardNvn != other.CharCardNvn)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0)hash ^= Id.GetHashCode();
      if (Key.Length != 0)hash ^= Key.GetHashCode();
      if (Password.Length != 0)hash ^= Password.GetHashCode();
      if (host_ != null)hash ^= Host.GetHashCode();
      if (dueler_ != null)hash ^= Dueler.GetHashCode();
      if (Status != global::ULZAsset.ProtoMod.RoomStatus.OnInit)hash ^= Status.GetHashCode();
      if (Turns != 0)hash ^= Turns.GetHashCode();
      if (CostLimitMax != 0)hash ^= CostLimitMax.GetHashCode();
      if (CostLimitMin != 0)hash ^= CostLimitMin.GetHashCode();
      if (charCardLimitMax_ != null)hash ^= CharCardLimitMax.GetHashCode();
      if (charCardLimitMin_ != null)hash ^= CharCardLimitMin.GetHashCode();
      if (CharCardNvn != 0)hash ^= CharCardNvn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (host_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Host);
      }
      if (dueler_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dueler);
      }
      if (Status != global::ULZAsset.ProtoMod.RoomStatus.OnInit) {
        output.WriteRawTag(56);
        output.WriteEnum((int)Status);
      }
      if (Turns != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Turns);
      }
      if (CostLimitMax != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CostLimitMax);
      }
      if (CostLimitMin != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CostLimitMin);
      }
      if (charCardLimitMax_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CharCardLimitMax);
      }
      if (charCardLimitMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CharCardLimitMin);
      }
      if (CharCardNvn != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CharCardNvn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (host_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (dueler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dueler);
      }
      if (Status != global::ULZAsset.ProtoMod.RoomStatus.OnInit) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
      }
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turns);
      }
      if (CostLimitMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostLimitMax);
      }
      if (CostLimitMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostLimitMin);
      }
      if (charCardLimitMax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharCardLimitMax);
      }
      if (charCardLimitMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharCardLimitMin);
      }
      if (CharCardNvn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharCardNvn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.host_ != null) {
        if (host_ == null) {
          Host = new global::ULZAsset.ProtoMod.RmUserInfo();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.dueler_ != null) {
        if (dueler_ == null) {
          Dueler = new global::ULZAsset.ProtoMod.RmUserInfo();
        }
        Dueler.MergeFrom(other.Dueler);
      }
      if (other.Status != global::ULZAsset.ProtoMod.RoomStatus.OnInit) {
        Status = other.Status;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.CostLimitMax != 0) {
        CostLimitMax = other.CostLimitMax;
      }
      if (other.CostLimitMin != 0) {
        CostLimitMin = other.CostLimitMin;
      }
      if (other.charCardLimitMax_ != null) {
        if (charCardLimitMax_ == null) {
          CharCardLimitMax = new global::ULZAsset.ProtoMod.RmCharCardInfo();
        }
        CharCardLimitMax.MergeFrom(other.CharCardLimitMax);
      }
      if (other.charCardLimitMin_ != null) {
        if (charCardLimitMin_ == null) {
          CharCardLimitMin = new global::ULZAsset.ProtoMod.RmCharCardInfo();
        }
        CharCardLimitMin.MergeFrom(other.CharCardLimitMin);
      }
      if (other.CharCardNvn != 0) {
        CharCardNvn = other.CharCardNvn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              Id = input.ReadString();
              break;
            }
          case 18:
            {
              Key = input.ReadString();
              break;
            }
          case 26:
            {
              Password = input.ReadString();
              break;
            }
          case 34:
            {
              if (host_ == null) {
                Host = new global::ULZAsset.ProtoMod.RmUserInfo();
              }
              input.ReadMessage(Host);
              break;
            }
          case 42:
            {
              if (dueler_ == null) {
                Dueler = new global::ULZAsset.ProtoMod.RmUserInfo();
              }
              input.ReadMessage(Dueler);
              break;
            }
          case 56:
            {
              Status = (global::ULZAsset.ProtoMod.RoomStatus)input.ReadEnum();
              break;
            }
          case 64:
            {
              Turns = input.ReadInt32();
              break;
            }
          case 72:
            {
              CostLimitMax = input.ReadInt32();
              break;
            }
          case 80:
            {
              CostLimitMin = input.ReadInt32();
              break;
            }
          case 90:
            {
              if (charCardLimitMax_ == null) {
                CharCardLimitMax = new global::ULZAsset.ProtoMod.RmCharCardInfo();
              }
              input.ReadMessage(CharCardLimitMax);
              break;
            }
          case 98:
            {
              if (charCardLimitMin_ == null) {
                CharCardLimitMin = new global::ULZAsset.ProtoMod.RmCharCardInfo();
              }
              input.ReadMessage(CharCardLimitMin);
              break;
            }
          case 104:
            {
              CharCardNvn = input.ReadInt32();
              break;
            }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///RmMsg : 
  ///to pass the user message / stricker
  /// </summary>
  public sealed partial class RoomMsg : pb::IMessage<RoomMsg> {
    private static readonly pb::MessageParser<RoomMsg> _parser = new pb::MessageParser<RoomMsg>(() => new RoomMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMsg(RoomMsg other) : this() {
      key_ = other.key_;
      formId_ = other.formId_;
      toId_ = other.toId_;
      message_ = other.message_;
      msgType_ = other.msgType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomMsg Clone() {
      return new RoomMsg(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "form_id" field.</summary>
    public const int FormIdFieldNumber = 2;
    private string formId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FormId {
      get { return formId_; }
      set {
        formId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_id" field.</summary>
    public const int ToIdFieldNumber = 3;
    private string toId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToId {
      get { return toId_; }
      set {
        toId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 5;
    private global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType msgType_ = global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType.UserText;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key)return false;
      if (FormId != other.FormId)return false;
      if (ToId != other.ToId)return false;
      if (Message != other.Message)return false;
      if (MsgType != other.MsgType)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0)hash ^= Key.GetHashCode();
      if (FormId.Length != 0)hash ^= FormId.GetHashCode();
      if (ToId.Length != 0)hash ^= ToId.GetHashCode();
      if (Message.Length != 0)hash ^= Message.GetHashCode();
      if (MsgType != global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType.UserText)hash ^= MsgType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (FormId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FormId);
      }
      if (ToId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ToId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (MsgType != global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType.UserText) {
        output.WriteRawTag(40);
        output.WriteEnum((int)MsgType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (FormId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FormId);
      }
      if (ToId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (MsgType != global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType.UserText) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MsgType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomMsg other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.FormId.Length != 0) {
        FormId = other.FormId;
      }
      if (other.ToId.Length != 0) {
        ToId = other.ToId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.MsgType != global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType.UserText) {
        MsgType = other.MsgType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              Key = input.ReadString();
              break;
            }
          case 18:
            {
              FormId = input.ReadString();
              break;
            }
          case 26:
            {
              ToId = input.ReadString();
              break;
            }
          case 34:
            {
              Message = input.ReadString();
              break;
            }
          case 40:
            {
              MsgType = (global::ULZAsset.ProtoMod.RoomMsg.Types.MsgType)input.ReadEnum();
              break;
            }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RoomMsg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MsgType {
        [pbr::OriginalName("USER_TEXT")] UserText = 0, [pbr::OriginalName("USER_STRICKER")] UserStricker = 1, [pbr::OriginalName("SYSTEM_INFO")] SystemInfo = 2, [pbr::OriginalName("SYSTEM_WARN")] SystemWarn = 3, [pbr::OriginalName("SYSTEM_ERR")] SystemErr = 4,
      }

    }
    #endregion

  }

  public sealed partial class RoomReq : pb::IMessage<RoomReq> {
    private static readonly pb::MessageParser<RoomReq> _parser = new pb::MessageParser<RoomReq>(() => new RoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq(RoomReq other) : this() {
      key_ = other.key_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      isDuel_ = other.isDuel_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq Clone() {
      return new RoomReq(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::ULZAsset.ProtoMod.RmUserInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmUserInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "is_duel" field.</summary>
    public const int IsDuelFieldNumber = 3;
    private bool isDuel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDuel {
      get { return isDuel_; }
      set {
        isDuel_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key)return false;
      if (!object.Equals(User, other.User))return false;
      if (IsDuel != other.IsDuel)return false;
      if (Password != other.Password)return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0)hash ^= Key.GetHashCode();
      if (user_ != null)hash ^= User.GetHashCode();
      if (IsDuel != false)hash ^= IsDuel.GetHashCode();
      if (Password.Length != 0)hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (IsDuel != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDuel);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (IsDuel != false) {
        size += 1 + 1;
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomReq other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::ULZAsset.ProtoMod.RmUserInfo();
        }
        User.MergeFrom(other.User);
      }
      if (other.IsDuel != false) {
        IsDuel = other.IsDuel;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              Key = input.ReadString();
              break;
            }
          case 18:
            {
              if (user_ == null) {
                User = new global::ULZAsset.ProtoMod.RmUserInfo();
              }
              input.ReadMessage(User);
              break;
            }
          case 24:
            {
              IsDuel = input.ReadBool();
              break;
            }
          case 34:
            {
              Password = input.ReadString();
              break;
            }
        }
      }
    }

  }

  public sealed partial class RoomCreateReq : pb::IMessage<RoomCreateReq> {
    private static readonly pb::MessageParser<RoomCreateReq> _parser = new pb::MessageParser<RoomCreateReq>(() => new RoomCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq(RoomCreateReq other) : this() {
      key_ = other.key_;
      host_ = other.host_ != null ? other.host_.Clone() : null;
      password_ = other.password_;
      costLimitMax_ = other.costLimitMax_;
      costLimitMin_ = other.costLimitMin_;
      charCardNvn_ = other.charCardNvn_;
      charCardLimitMax_ = other.charCardLimitMax_ != null ? other.charCardLimitMax_.Clone() : null;
      charCardLimitMin_ = other.charCardLimitMin_ != null ? other.charCardLimitMin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq Clone() {
      return new RoomCreateReq(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private global::ULZAsset.ProtoMod.RmUserInfo host_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmUserInfo Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost_limit_max" field.</summary>
    public const int CostLimitMaxFieldNumber = 4;
    private int costLimitMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostLimitMax {
      get { return costLimitMax_; }
      set {
        costLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "cost_limit_min" field.</summary>
    public const int CostLimitMinFieldNumber = 5;
    private int costLimitMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostLimitMin {
      get { return costLimitMin_; }
      set {
        costLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "char_card_nvn" field.</summary>
    public const int CharCardNvnFieldNumber = 6;
    private int charCardNvn_;
    /// <summary>
    /// 1vs1 or 3vs3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharCardNvn {
      get { return charCardNvn_; }
      set {
        charCardNvn_ = value;
      }
    }

    /// <summary>Field number for the "char_card_limit_max" field.</summary>
    public const int CharCardLimitMaxFieldNumber = 7;
    private global::ULZAsset.ProtoMod.RmCharCardInfo charCardLimitMax_;
    /// <summary>
    /// Limitation for Charecter Card Cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmCharCardInfo CharCardLimitMax {
      get { return charCardLimitMax_; }
      set {
        charCardLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "char_card_limit_min" field.</summary>
    public const int CharCardLimitMinFieldNumber = 8;
    private global::ULZAsset.ProtoMod.RmCharCardInfo charCardLimitMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.RmCharCardInfo CharCardLimitMin {
      get { return charCardLimitMin_; }
      set {
        charCardLimitMin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key)return false;
      if (!object.Equals(Host, other.Host))return false;
      if (Password != other.Password)return false;
      if (CostLimitMax != other.CostLimitMax)return false;
      if (CostLimitMin != other.CostLimitMin)return false;
      if (CharCardNvn != other.CharCardNvn)return false;
      if (!object.Equals(CharCardLimitMax, other.CharCardLimitMax))return false;
      if (!object.Equals(CharCardLimitMin, other.CharCardLimitMin))return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0)hash ^= Key.GetHashCode();
      if (host_ != null)hash ^= Host.GetHashCode();
      if (Password.Length != 0)hash ^= Password.GetHashCode();
      if (CostLimitMax != 0)hash ^= CostLimitMax.GetHashCode();
      if (CostLimitMin != 0)hash ^= CostLimitMin.GetHashCode();
      if (CharCardNvn != 0)hash ^= CharCardNvn.GetHashCode();
      if (charCardLimitMax_ != null)hash ^= CharCardLimitMax.GetHashCode();
      if (charCardLimitMin_ != null)hash ^= CharCardLimitMin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (host_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Host);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (CostLimitMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CostLimitMax);
      }
      if (CostLimitMin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CostLimitMin);
      }
      if (CharCardNvn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CharCardNvn);
      }
      if (charCardLimitMax_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CharCardLimitMax);
      }
      if (charCardLimitMin_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CharCardLimitMin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (host_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (CostLimitMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostLimitMax);
      }
      if (CostLimitMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostLimitMin);
      }
      if (CharCardNvn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharCardNvn);
      }
      if (charCardLimitMax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharCardLimitMax);
      }
      if (charCardLimitMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharCardLimitMin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.host_ != null) {
        if (host_ == null) {
          Host = new global::ULZAsset.ProtoMod.RmUserInfo();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.CostLimitMax != 0) {
        CostLimitMax = other.CostLimitMax;
      }
      if (other.CostLimitMin != 0) {
        CostLimitMin = other.CostLimitMin;
      }
      if (other.CharCardNvn != 0) {
        CharCardNvn = other.CharCardNvn;
      }
      if (other.charCardLimitMax_ != null) {
        if (charCardLimitMax_ == null) {
          CharCardLimitMax = new global::ULZAsset.ProtoMod.RmCharCardInfo();
        }
        CharCardLimitMax.MergeFrom(other.CharCardLimitMax);
      }
      if (other.charCardLimitMin_ != null) {
        if (charCardLimitMin_ == null) {
          CharCardLimitMin = new global::ULZAsset.ProtoMod.RmCharCardInfo();
        }
        CharCardLimitMin.MergeFrom(other.CharCardLimitMin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch (tag) {
          default : _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
          case 10:
            {
              Key = input.ReadString();
              break;
            }
          case 18:
            {
              if (host_ == null) {
                Host = new global::ULZAsset.ProtoMod.RmUserInfo();
              }
              input.ReadMessage(Host);
              break;
            }
          case 26:
            {
              Password = input.ReadString();
              break;
            }
          case 32:
            {
              CostLimitMax = input.ReadInt32();
              break;
            }
          case 40:
            {
              CostLimitMin = input.ReadInt32();
              break;
            }
          case 48:
            {
              CharCardNvn = input.ReadInt32();
              break;
            }
          case 58:
            {
              if (charCardLimitMax_ == null) {
                CharCardLimitMax = new global::ULZAsset.ProtoMod.RmCharCardInfo();
              }
              input.ReadMessage(CharCardLimitMax);
              break;
            }
          case 66:
            {
              if (charCardLimitMin_ == null) {
                CharCardLimitMin = new global::ULZAsset.ProtoMod.RmCharCardInfo();
              }
              input.ReadMessage(CharCardLimitMin);
              break;
            }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code